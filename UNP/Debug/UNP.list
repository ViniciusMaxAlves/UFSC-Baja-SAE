
UNP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b78  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003c84  08003c84  00013c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cb0  08003cb0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003cb0  08003cb0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cb0  08003cb0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cb0  08003cb0  00013cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cb4  08003cb4  00013cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000000c  08003cc4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08003cc4  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3ad  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ace  00000000  00000000  0002c3e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e88  00000000  00000000  0002deb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd0  00000000  00000000  0002ed38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013b9a  00000000  00000000  0002fb08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009763  00000000  00000000  000436a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00070363  00000000  00000000  0004ce05  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bd168  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dbc  00000000  00000000  000bd1e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c6c 	.word	0x08003c6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003c6c 	.word	0x08003c6c

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f923 	bl	80003a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f003 fb92 	bl	8003890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f93b 	bl	8000412 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f903 	bl	80003be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	2000002c 	.word	0x2000002c

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	2000002c 	.word	0x2000002c

08000210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f003 0307 	and.w	r3, r3, #7
 800021e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800022c:	4013      	ands	r3, r2
 800022e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	60d3      	str	r3, [r2, #12]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <__NVIC_GetPriorityGrouping+0x18>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	f003 0307 	and.w	r3, r3, #7
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000282:	2b00      	cmp	r3, #0
 8000284:	db0b      	blt.n	800029e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	f003 021f 	and.w	r2, r3, #31
 800028c:	4906      	ldr	r1, [pc, #24]	; (80002a8 <__NVIC_EnableIRQ+0x34>)
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	095b      	lsrs	r3, r3, #5
 8000294:	2001      	movs	r0, #1
 8000296:	fa00 f202 	lsl.w	r2, r0, r2
 800029a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	e000e100 	.word	0xe000e100

080002ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db0a      	blt.n	80002d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	490c      	ldr	r1, [pc, #48]	; (80002f8 <__NVIC_SetPriority+0x4c>)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	0112      	lsls	r2, r2, #4
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	440b      	add	r3, r1
 80002d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d4:	e00a      	b.n	80002ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4908      	ldr	r1, [pc, #32]	; (80002fc <__NVIC_SetPriority+0x50>)
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	3b04      	subs	r3, #4
 80002e4:	0112      	lsls	r2, r2, #4
 80002e6:	b2d2      	uxtb	r2, r2
 80002e8:	440b      	add	r3, r1
 80002ea:	761a      	strb	r2, [r3, #24]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e100 	.word	0xe000e100
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000300:	b480      	push	{r7}
 8000302:	b089      	sub	sp, #36	; 0x24
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f003 0307 	and.w	r3, r3, #7
 8000312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000314:	69fb      	ldr	r3, [r7, #28]
 8000316:	f1c3 0307 	rsb	r3, r3, #7
 800031a:	2b04      	cmp	r3, #4
 800031c:	bf28      	it	cs
 800031e:	2304      	movcs	r3, #4
 8000320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	3304      	adds	r3, #4
 8000326:	2b06      	cmp	r3, #6
 8000328:	d902      	bls.n	8000330 <NVIC_EncodePriority+0x30>
 800032a:	69fb      	ldr	r3, [r7, #28]
 800032c:	3b03      	subs	r3, #3
 800032e:	e000      	b.n	8000332 <NVIC_EncodePriority+0x32>
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000334:	f04f 32ff 	mov.w	r2, #4294967295
 8000338:	69bb      	ldr	r3, [r7, #24]
 800033a:	fa02 f303 	lsl.w	r3, r2, r3
 800033e:	43da      	mvns	r2, r3
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	401a      	ands	r2, r3
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000348:	f04f 31ff 	mov.w	r1, #4294967295
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	fa01 f303 	lsl.w	r3, r1, r3
 8000352:	43d9      	mvns	r1, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000358:	4313      	orrs	r3, r2
         );
}
 800035a:	4618      	mov	r0, r3
 800035c:	3724      	adds	r7, #36	; 0x24
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr

08000364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3b01      	subs	r3, #1
 8000370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000374:	d301      	bcc.n	800037a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000376:	2301      	movs	r3, #1
 8000378:	e00f      	b.n	800039a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <SysTick_Config+0x40>)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3b01      	subs	r3, #1
 8000380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000382:	210f      	movs	r1, #15
 8000384:	f04f 30ff 	mov.w	r0, #4294967295
 8000388:	f7ff ff90 	bl	80002ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <SysTick_Config+0x40>)
 800038e:	2200      	movs	r2, #0
 8000390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000392:	4b04      	ldr	r3, [pc, #16]	; (80003a4 <SysTick_Config+0x40>)
 8000394:	2207      	movs	r2, #7
 8000396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000398:	2300      	movs	r3, #0
}
 800039a:	4618      	mov	r0, r3
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	e000e010 	.word	0xe000e010

080003a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f7ff ff2d 	bl	8000210 <__NVIC_SetPriorityGrouping>
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003be:	b580      	push	{r7, lr}
 80003c0:	b086      	sub	sp, #24
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	4603      	mov	r3, r0
 80003c6:	60b9      	str	r1, [r7, #8]
 80003c8:	607a      	str	r2, [r7, #4]
 80003ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003d0:	f7ff ff42 	bl	8000258 <__NVIC_GetPriorityGrouping>
 80003d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	68b9      	ldr	r1, [r7, #8]
 80003da:	6978      	ldr	r0, [r7, #20]
 80003dc:	f7ff ff90 	bl	8000300 <NVIC_EncodePriority>
 80003e0:	4602      	mov	r2, r0
 80003e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003e6:	4611      	mov	r1, r2
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ff5f 	bl	80002ac <__NVIC_SetPriority>
}
 80003ee:	bf00      	nop
 80003f0:	3718      	adds	r7, #24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b082      	sub	sp, #8
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	4603      	mov	r3, r0
 80003fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ff35 	bl	8000274 <__NVIC_EnableIRQ>
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	b082      	sub	sp, #8
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800041a:	6878      	ldr	r0, [r7, #4]
 800041c:	f7ff ffa2 	bl	8000364 <SysTick_Config>
 8000420:	4603      	mov	r3, r0
}
 8000422:	4618      	mov	r0, r3
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000434:	2300      	movs	r3, #0
 8000436:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d101      	bne.n	8000442 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800043e:	2301      	movs	r3, #1
 8000440:	e043      	b.n	80004ca <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	461a      	mov	r2, r3
 8000448:	4b22      	ldr	r3, [pc, #136]	; (80004d4 <HAL_DMA_Init+0xa8>)
 800044a:	4413      	add	r3, r2
 800044c:	4a22      	ldr	r2, [pc, #136]	; (80004d8 <HAL_DMA_Init+0xac>)
 800044e:	fba2 2303 	umull	r2, r3, r2, r3
 8000452:	091b      	lsrs	r3, r3, #4
 8000454:	009a      	lsls	r2, r3, #2
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4a1f      	ldr	r2, [pc, #124]	; (80004dc <HAL_DMA_Init+0xb0>)
 800045e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	2202      	movs	r2, #2
 8000464:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000476:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800047a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000484:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	68db      	ldr	r3, [r3, #12]
 800048a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000490:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800049c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80004a4:	68fa      	ldr	r2, [r7, #12]
 80004a6:	4313      	orrs	r3, r2
 80004a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	68fa      	ldr	r2, [r7, #12]
 80004b0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	2200      	movs	r2, #0
 80004b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2201      	movs	r2, #1
 80004bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2200      	movs	r2, #0
 80004c4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80004c8:	2300      	movs	r3, #0
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr
 80004d4:	bffdfff8 	.word	0xbffdfff8
 80004d8:	cccccccd 	.word	0xcccccccd
 80004dc:	40020000 	.word	0x40020000

080004e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
 80004ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80004ee:	2300      	movs	r3, #0
 80004f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d101      	bne.n	8000500 <HAL_DMA_Start_IT+0x20>
 80004fc:	2302      	movs	r3, #2
 80004fe:	e04a      	b.n	8000596 <HAL_DMA_Start_IT+0xb6>
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	2201      	movs	r2, #1
 8000504:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800050e:	2b01      	cmp	r3, #1
 8000510:	d13a      	bne.n	8000588 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	2202      	movs	r2, #2
 8000516:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	2200      	movs	r2, #0
 800051e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f022 0201 	bic.w	r2, r2, #1
 800052e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	68b9      	ldr	r1, [r7, #8]
 8000536:	68f8      	ldr	r0, [r7, #12]
 8000538:	f000 f9ae 	bl	8000898 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000540:	2b00      	cmp	r3, #0
 8000542:	d008      	beq.n	8000556 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f042 020e 	orr.w	r2, r2, #14
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	e00f      	b.n	8000576 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f022 0204 	bic.w	r2, r2, #4
 8000564:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f042 020a 	orr.w	r2, r2, #10
 8000574:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f042 0201 	orr.w	r2, r2, #1
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	e005      	b.n	8000594 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	2200      	movs	r2, #0
 800058c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000590:	2302      	movs	r3, #2
 8000592:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000594:	7dfb      	ldrb	r3, [r7, #23]
}
 8000596:	4618      	mov	r0, r3
 8000598:	3718      	adds	r7, #24
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
	...

080005a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80005a8:	2300      	movs	r3, #0
 80005aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d005      	beq.n	80005c2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2204      	movs	r2, #4
 80005ba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80005bc:	2301      	movs	r3, #1
 80005be:	73fb      	strb	r3, [r7, #15]
 80005c0:	e051      	b.n	8000666 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f022 020e 	bic.w	r2, r2, #14
 80005d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f022 0201 	bic.w	r2, r2, #1
 80005e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a22      	ldr	r2, [pc, #136]	; (8000670 <HAL_DMA_Abort_IT+0xd0>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d029      	beq.n	8000640 <HAL_DMA_Abort_IT+0xa0>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a20      	ldr	r2, [pc, #128]	; (8000674 <HAL_DMA_Abort_IT+0xd4>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d022      	beq.n	800063c <HAL_DMA_Abort_IT+0x9c>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a1f      	ldr	r2, [pc, #124]	; (8000678 <HAL_DMA_Abort_IT+0xd8>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d01a      	beq.n	8000636 <HAL_DMA_Abort_IT+0x96>
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a1d      	ldr	r2, [pc, #116]	; (800067c <HAL_DMA_Abort_IT+0xdc>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d012      	beq.n	8000630 <HAL_DMA_Abort_IT+0x90>
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a1c      	ldr	r2, [pc, #112]	; (8000680 <HAL_DMA_Abort_IT+0xe0>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d00a      	beq.n	800062a <HAL_DMA_Abort_IT+0x8a>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a1a      	ldr	r2, [pc, #104]	; (8000684 <HAL_DMA_Abort_IT+0xe4>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d102      	bne.n	8000624 <HAL_DMA_Abort_IT+0x84>
 800061e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000622:	e00e      	b.n	8000642 <HAL_DMA_Abort_IT+0xa2>
 8000624:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000628:	e00b      	b.n	8000642 <HAL_DMA_Abort_IT+0xa2>
 800062a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800062e:	e008      	b.n	8000642 <HAL_DMA_Abort_IT+0xa2>
 8000630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000634:	e005      	b.n	8000642 <HAL_DMA_Abort_IT+0xa2>
 8000636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800063a:	e002      	b.n	8000642 <HAL_DMA_Abort_IT+0xa2>
 800063c:	2310      	movs	r3, #16
 800063e:	e000      	b.n	8000642 <HAL_DMA_Abort_IT+0xa2>
 8000640:	2301      	movs	r3, #1
 8000642:	4a11      	ldr	r2, [pc, #68]	; (8000688 <HAL_DMA_Abort_IT+0xe8>)
 8000644:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2201      	movs	r2, #1
 800064a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2200      	movs	r2, #0
 8000652:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800065a:	2b00      	cmp	r3, #0
 800065c:	d003      	beq.n	8000666 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	4798      	blx	r3
    } 
  }
  return status;
 8000666:	7bfb      	ldrb	r3, [r7, #15]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40020008 	.word	0x40020008
 8000674:	4002001c 	.word	0x4002001c
 8000678:	40020030 	.word	0x40020030
 800067c:	40020044 	.word	0x40020044
 8000680:	40020058 	.word	0x40020058
 8000684:	4002006c 	.word	0x4002006c
 8000688:	40020000 	.word	0x40020000

0800068c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	2204      	movs	r2, #4
 80006aa:	409a      	lsls	r2, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	4013      	ands	r3, r2
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d04f      	beq.n	8000754 <HAL_DMA_IRQHandler+0xc8>
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	f003 0304 	and.w	r3, r3, #4
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d04a      	beq.n	8000754 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f003 0320 	and.w	r3, r3, #32
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d107      	bne.n	80006dc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f022 0204 	bic.w	r2, r2, #4
 80006da:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a66      	ldr	r2, [pc, #408]	; (800087c <HAL_DMA_IRQHandler+0x1f0>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d029      	beq.n	800073a <HAL_DMA_IRQHandler+0xae>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a65      	ldr	r2, [pc, #404]	; (8000880 <HAL_DMA_IRQHandler+0x1f4>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d022      	beq.n	8000736 <HAL_DMA_IRQHandler+0xaa>
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a63      	ldr	r2, [pc, #396]	; (8000884 <HAL_DMA_IRQHandler+0x1f8>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d01a      	beq.n	8000730 <HAL_DMA_IRQHandler+0xa4>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a62      	ldr	r2, [pc, #392]	; (8000888 <HAL_DMA_IRQHandler+0x1fc>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d012      	beq.n	800072a <HAL_DMA_IRQHandler+0x9e>
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a60      	ldr	r2, [pc, #384]	; (800088c <HAL_DMA_IRQHandler+0x200>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d00a      	beq.n	8000724 <HAL_DMA_IRQHandler+0x98>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a5f      	ldr	r2, [pc, #380]	; (8000890 <HAL_DMA_IRQHandler+0x204>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d102      	bne.n	800071e <HAL_DMA_IRQHandler+0x92>
 8000718:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800071c:	e00e      	b.n	800073c <HAL_DMA_IRQHandler+0xb0>
 800071e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000722:	e00b      	b.n	800073c <HAL_DMA_IRQHandler+0xb0>
 8000724:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000728:	e008      	b.n	800073c <HAL_DMA_IRQHandler+0xb0>
 800072a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800072e:	e005      	b.n	800073c <HAL_DMA_IRQHandler+0xb0>
 8000730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000734:	e002      	b.n	800073c <HAL_DMA_IRQHandler+0xb0>
 8000736:	2340      	movs	r3, #64	; 0x40
 8000738:	e000      	b.n	800073c <HAL_DMA_IRQHandler+0xb0>
 800073a:	2304      	movs	r3, #4
 800073c:	4a55      	ldr	r2, [pc, #340]	; (8000894 <HAL_DMA_IRQHandler+0x208>)
 800073e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000744:	2b00      	cmp	r3, #0
 8000746:	f000 8094 	beq.w	8000872 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000752:	e08e      	b.n	8000872 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	2202      	movs	r2, #2
 800075a:	409a      	lsls	r2, r3
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	4013      	ands	r3, r2
 8000760:	2b00      	cmp	r3, #0
 8000762:	d056      	beq.n	8000812 <HAL_DMA_IRQHandler+0x186>
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	2b00      	cmp	r3, #0
 800076c:	d051      	beq.n	8000812 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f003 0320 	and.w	r3, r3, #32
 8000778:	2b00      	cmp	r3, #0
 800077a:	d10b      	bne.n	8000794 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f022 020a 	bic.w	r2, r2, #10
 800078a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2201      	movs	r2, #1
 8000790:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a38      	ldr	r2, [pc, #224]	; (800087c <HAL_DMA_IRQHandler+0x1f0>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d029      	beq.n	80007f2 <HAL_DMA_IRQHandler+0x166>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a37      	ldr	r2, [pc, #220]	; (8000880 <HAL_DMA_IRQHandler+0x1f4>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d022      	beq.n	80007ee <HAL_DMA_IRQHandler+0x162>
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a35      	ldr	r2, [pc, #212]	; (8000884 <HAL_DMA_IRQHandler+0x1f8>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d01a      	beq.n	80007e8 <HAL_DMA_IRQHandler+0x15c>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a34      	ldr	r2, [pc, #208]	; (8000888 <HAL_DMA_IRQHandler+0x1fc>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d012      	beq.n	80007e2 <HAL_DMA_IRQHandler+0x156>
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a32      	ldr	r2, [pc, #200]	; (800088c <HAL_DMA_IRQHandler+0x200>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d00a      	beq.n	80007dc <HAL_DMA_IRQHandler+0x150>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a31      	ldr	r2, [pc, #196]	; (8000890 <HAL_DMA_IRQHandler+0x204>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d102      	bne.n	80007d6 <HAL_DMA_IRQHandler+0x14a>
 80007d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80007d4:	e00e      	b.n	80007f4 <HAL_DMA_IRQHandler+0x168>
 80007d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007da:	e00b      	b.n	80007f4 <HAL_DMA_IRQHandler+0x168>
 80007dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007e0:	e008      	b.n	80007f4 <HAL_DMA_IRQHandler+0x168>
 80007e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e6:	e005      	b.n	80007f4 <HAL_DMA_IRQHandler+0x168>
 80007e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007ec:	e002      	b.n	80007f4 <HAL_DMA_IRQHandler+0x168>
 80007ee:	2320      	movs	r3, #32
 80007f0:	e000      	b.n	80007f4 <HAL_DMA_IRQHandler+0x168>
 80007f2:	2302      	movs	r3, #2
 80007f4:	4a27      	ldr	r2, [pc, #156]	; (8000894 <HAL_DMA_IRQHandler+0x208>)
 80007f6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2200      	movs	r2, #0
 80007fc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000804:	2b00      	cmp	r3, #0
 8000806:	d034      	beq.n	8000872 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000810:	e02f      	b.n	8000872 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000816:	2208      	movs	r2, #8
 8000818:	409a      	lsls	r2, r3
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	4013      	ands	r3, r2
 800081e:	2b00      	cmp	r3, #0
 8000820:	d028      	beq.n	8000874 <HAL_DMA_IRQHandler+0x1e8>
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	f003 0308 	and.w	r3, r3, #8
 8000828:	2b00      	cmp	r3, #0
 800082a:	d023      	beq.n	8000874 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f022 020e 	bic.w	r2, r2, #14
 800083a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000844:	2101      	movs	r1, #1
 8000846:	fa01 f202 	lsl.w	r2, r1, r2
 800084a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2201      	movs	r2, #1
 8000850:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2201      	movs	r2, #1
 8000856:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2200      	movs	r2, #0
 800085e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	2b00      	cmp	r3, #0
 8000868:	d004      	beq.n	8000874 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	4798      	blx	r3
    }
  }
  return;
 8000872:	bf00      	nop
 8000874:	bf00      	nop
}
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40020008 	.word	0x40020008
 8000880:	4002001c 	.word	0x4002001c
 8000884:	40020030 	.word	0x40020030
 8000888:	40020044 	.word	0x40020044
 800088c:	40020058 	.word	0x40020058
 8000890:	4002006c 	.word	0x4002006c
 8000894:	40020000 	.word	0x40020000

08000898 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
 80008a4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008ae:	2101      	movs	r1, #1
 80008b0:	fa01 f202 	lsl.w	r2, r1, r2
 80008b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	683a      	ldr	r2, [r7, #0]
 80008bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	2b10      	cmp	r3, #16
 80008c4:	d108      	bne.n	80008d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80008d6:	e007      	b.n	80008e8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	68ba      	ldr	r2, [r7, #8]
 80008de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	60da      	str	r2, [r3, #12]
}
 80008e8:	bf00      	nop
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
	...

080008f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b08b      	sub	sp, #44	; 0x2c
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000906:	e127      	b.n	8000b58 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000908:	2201      	movs	r2, #1
 800090a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	69fa      	ldr	r2, [r7, #28]
 8000918:	4013      	ands	r3, r2
 800091a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800091c:	69ba      	ldr	r2, [r7, #24]
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	429a      	cmp	r2, r3
 8000922:	f040 8116 	bne.w	8000b52 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	2b12      	cmp	r3, #18
 800092c:	d034      	beq.n	8000998 <HAL_GPIO_Init+0xa4>
 800092e:	2b12      	cmp	r3, #18
 8000930:	d80d      	bhi.n	800094e <HAL_GPIO_Init+0x5a>
 8000932:	2b02      	cmp	r3, #2
 8000934:	d02b      	beq.n	800098e <HAL_GPIO_Init+0x9a>
 8000936:	2b02      	cmp	r3, #2
 8000938:	d804      	bhi.n	8000944 <HAL_GPIO_Init+0x50>
 800093a:	2b00      	cmp	r3, #0
 800093c:	d031      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
 800093e:	2b01      	cmp	r3, #1
 8000940:	d01c      	beq.n	800097c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000942:	e048      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000944:	2b03      	cmp	r3, #3
 8000946:	d043      	beq.n	80009d0 <HAL_GPIO_Init+0xdc>
 8000948:	2b11      	cmp	r3, #17
 800094a:	d01b      	beq.n	8000984 <HAL_GPIO_Init+0x90>
          break;
 800094c:	e043      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800094e:	4a89      	ldr	r2, [pc, #548]	; (8000b74 <HAL_GPIO_Init+0x280>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d026      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
 8000954:	4a87      	ldr	r2, [pc, #540]	; (8000b74 <HAL_GPIO_Init+0x280>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d806      	bhi.n	8000968 <HAL_GPIO_Init+0x74>
 800095a:	4a87      	ldr	r2, [pc, #540]	; (8000b78 <HAL_GPIO_Init+0x284>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d020      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
 8000960:	4a86      	ldr	r2, [pc, #536]	; (8000b7c <HAL_GPIO_Init+0x288>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d01d      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
          break;
 8000966:	e036      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000968:	4a85      	ldr	r2, [pc, #532]	; (8000b80 <HAL_GPIO_Init+0x28c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d019      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
 800096e:	4a85      	ldr	r2, [pc, #532]	; (8000b84 <HAL_GPIO_Init+0x290>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d016      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
 8000974:	4a84      	ldr	r2, [pc, #528]	; (8000b88 <HAL_GPIO_Init+0x294>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d013      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
          break;
 800097a:	e02c      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	623b      	str	r3, [r7, #32]
          break;
 8000982:	e028      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	3304      	adds	r3, #4
 800098a:	623b      	str	r3, [r7, #32]
          break;
 800098c:	e023      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	68db      	ldr	r3, [r3, #12]
 8000992:	3308      	adds	r3, #8
 8000994:	623b      	str	r3, [r7, #32]
          break;
 8000996:	e01e      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	330c      	adds	r3, #12
 800099e:	623b      	str	r3, [r7, #32]
          break;
 80009a0:	e019      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	689b      	ldr	r3, [r3, #8]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d102      	bne.n	80009b0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009aa:	2304      	movs	r3, #4
 80009ac:	623b      	str	r3, [r7, #32]
          break;
 80009ae:	e012      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d105      	bne.n	80009c4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009b8:	2308      	movs	r3, #8
 80009ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	69fa      	ldr	r2, [r7, #28]
 80009c0:	611a      	str	r2, [r3, #16]
          break;
 80009c2:	e008      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009c4:	2308      	movs	r3, #8
 80009c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	69fa      	ldr	r2, [r7, #28]
 80009cc:	615a      	str	r2, [r3, #20]
          break;
 80009ce:	e002      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
          break;
 80009d4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	2bff      	cmp	r3, #255	; 0xff
 80009da:	d801      	bhi.n	80009e0 <HAL_GPIO_Init+0xec>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	e001      	b.n	80009e4 <HAL_GPIO_Init+0xf0>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3304      	adds	r3, #4
 80009e4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	2bff      	cmp	r3, #255	; 0xff
 80009ea:	d802      	bhi.n	80009f2 <HAL_GPIO_Init+0xfe>
 80009ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	e002      	b.n	80009f8 <HAL_GPIO_Init+0x104>
 80009f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f4:	3b08      	subs	r3, #8
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	210f      	movs	r1, #15
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	fa01 f303 	lsl.w	r3, r1, r3
 8000a06:	43db      	mvns	r3, r3
 8000a08:	401a      	ands	r2, r3
 8000a0a:	6a39      	ldr	r1, [r7, #32]
 8000a0c:	693b      	ldr	r3, [r7, #16]
 8000a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a12:	431a      	orrs	r2, r3
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	f000 8096 	beq.w	8000b52 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a26:	4b59      	ldr	r3, [pc, #356]	; (8000b8c <HAL_GPIO_Init+0x298>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	4a58      	ldr	r2, [pc, #352]	; (8000b8c <HAL_GPIO_Init+0x298>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6193      	str	r3, [r2, #24]
 8000a32:	4b56      	ldr	r3, [pc, #344]	; (8000b8c <HAL_GPIO_Init+0x298>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a3e:	4a54      	ldr	r2, [pc, #336]	; (8000b90 <HAL_GPIO_Init+0x29c>)
 8000a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a42:	089b      	lsrs	r3, r3, #2
 8000a44:	3302      	adds	r3, #2
 8000a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4e:	f003 0303 	and.w	r3, r3, #3
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	220f      	movs	r2, #15
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a4b      	ldr	r2, [pc, #300]	; (8000b94 <HAL_GPIO_Init+0x2a0>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d013      	beq.n	8000a92 <HAL_GPIO_Init+0x19e>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a4a      	ldr	r2, [pc, #296]	; (8000b98 <HAL_GPIO_Init+0x2a4>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d00d      	beq.n	8000a8e <HAL_GPIO_Init+0x19a>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a49      	ldr	r2, [pc, #292]	; (8000b9c <HAL_GPIO_Init+0x2a8>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d007      	beq.n	8000a8a <HAL_GPIO_Init+0x196>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a48      	ldr	r2, [pc, #288]	; (8000ba0 <HAL_GPIO_Init+0x2ac>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d101      	bne.n	8000a86 <HAL_GPIO_Init+0x192>
 8000a82:	2303      	movs	r3, #3
 8000a84:	e006      	b.n	8000a94 <HAL_GPIO_Init+0x1a0>
 8000a86:	2304      	movs	r3, #4
 8000a88:	e004      	b.n	8000a94 <HAL_GPIO_Init+0x1a0>
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	e002      	b.n	8000a94 <HAL_GPIO_Init+0x1a0>
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e000      	b.n	8000a94 <HAL_GPIO_Init+0x1a0>
 8000a92:	2300      	movs	r3, #0
 8000a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a96:	f002 0203 	and.w	r2, r2, #3
 8000a9a:	0092      	lsls	r2, r2, #2
 8000a9c:	4093      	lsls	r3, r2
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000aa4:	493a      	ldr	r1, [pc, #232]	; (8000b90 <HAL_GPIO_Init+0x29c>)
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa8:	089b      	lsrs	r3, r3, #2
 8000aaa:	3302      	adds	r3, #2
 8000aac:	68fa      	ldr	r2, [r7, #12]
 8000aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d006      	beq.n	8000acc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000abe:	4b39      	ldr	r3, [pc, #228]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	4938      	ldr	r1, [pc, #224]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	600b      	str	r3, [r1, #0]
 8000aca:	e006      	b.n	8000ada <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000acc:	4b35      	ldr	r3, [pc, #212]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	4933      	ldr	r1, [pc, #204]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d006      	beq.n	8000af4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ae6:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000ae8:	685a      	ldr	r2, [r3, #4]
 8000aea:	492e      	ldr	r1, [pc, #184]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	604b      	str	r3, [r1, #4]
 8000af2:	e006      	b.n	8000b02 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000af4:	4b2b      	ldr	r3, [pc, #172]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000af6:	685a      	ldr	r2, [r3, #4]
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	43db      	mvns	r3, r3
 8000afc:	4929      	ldr	r1, [pc, #164]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000afe:	4013      	ands	r3, r2
 8000b00:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d006      	beq.n	8000b1c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b0e:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b10:	689a      	ldr	r2, [r3, #8]
 8000b12:	4924      	ldr	r1, [pc, #144]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	608b      	str	r3, [r1, #8]
 8000b1a:	e006      	b.n	8000b2a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b1c:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b1e:	689a      	ldr	r2, [r3, #8]
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	43db      	mvns	r3, r3
 8000b24:	491f      	ldr	r1, [pc, #124]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b26:	4013      	ands	r3, r2
 8000b28:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d006      	beq.n	8000b44 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b36:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b38:	68da      	ldr	r2, [r3, #12]
 8000b3a:	491a      	ldr	r1, [pc, #104]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	60cb      	str	r3, [r1, #12]
 8000b42:	e006      	b.n	8000b52 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b46:	68da      	ldr	r2, [r3, #12]
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	4915      	ldr	r1, [pc, #84]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b4e:	4013      	ands	r3, r2
 8000b50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b54:	3301      	adds	r3, #1
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	f47f aed0 	bne.w	8000908 <HAL_GPIO_Init+0x14>
  }
}
 8000b68:	bf00      	nop
 8000b6a:	372c      	adds	r7, #44	; 0x2c
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	10210000 	.word	0x10210000
 8000b78:	10110000 	.word	0x10110000
 8000b7c:	10120000 	.word	0x10120000
 8000b80:	10310000 	.word	0x10310000
 8000b84:	10320000 	.word	0x10320000
 8000b88:	10220000 	.word	0x10220000
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40010000 	.word	0x40010000
 8000b94:	40010800 	.word	0x40010800
 8000b98:	40010c00 	.word	0x40010c00
 8000b9c:	40011000 	.word	0x40011000
 8000ba0:	40011400 	.word	0x40011400
 8000ba4:	40010400 	.word	0x40010400

08000ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	807b      	strh	r3, [r7, #2]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bb8:	787b      	ldrb	r3, [r7, #1]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d003      	beq.n	8000bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bbe:	887a      	ldrh	r2, [r7, #2]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000bc4:	e003      	b.n	8000bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bc6:	887b      	ldrh	r3, [r7, #2]
 8000bc8:	041a      	lsls	r2, r3, #16
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	611a      	str	r2, [r3, #16]
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000be4:	695a      	ldr	r2, [r3, #20]
 8000be6:	88fb      	ldrh	r3, [r7, #6]
 8000be8:	4013      	ands	r3, r2
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d006      	beq.n	8000bfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bf0:	88fb      	ldrh	r3, [r7, #6]
 8000bf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f002 fd62 	bl	80036c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40010400 	.word	0x40010400

08000c08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d101      	bne.n	8000c1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e10f      	b.n	8000e3a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d106      	bne.n	8000c34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f002 fe60 	bl	80038f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2224      	movs	r2, #36	; 0x24
 8000c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f022 0201 	bic.w	r2, r2, #1
 8000c4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000c4c:	f001 fb40 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8000c50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	4a7b      	ldr	r2, [pc, #492]	; (8000e44 <HAL_I2C_Init+0x23c>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d807      	bhi.n	8000c6c <HAL_I2C_Init+0x64>
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	4a7a      	ldr	r2, [pc, #488]	; (8000e48 <HAL_I2C_Init+0x240>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	bf94      	ite	ls
 8000c64:	2301      	movls	r3, #1
 8000c66:	2300      	movhi	r3, #0
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	e006      	b.n	8000c7a <HAL_I2C_Init+0x72>
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4a77      	ldr	r2, [pc, #476]	; (8000e4c <HAL_I2C_Init+0x244>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	bf94      	ite	ls
 8000c74:	2301      	movls	r3, #1
 8000c76:	2300      	movhi	r3, #0
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e0db      	b.n	8000e3a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	4a72      	ldr	r2, [pc, #456]	; (8000e50 <HAL_I2C_Init+0x248>)
 8000c86:	fba2 2303 	umull	r2, r3, r2, r3
 8000c8a:	0c9b      	lsrs	r3, r3, #18
 8000c8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	68ba      	ldr	r2, [r7, #8]
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	6a1b      	ldr	r3, [r3, #32]
 8000ca8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	4a64      	ldr	r2, [pc, #400]	; (8000e44 <HAL_I2C_Init+0x23c>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d802      	bhi.n	8000cbc <HAL_I2C_Init+0xb4>
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	e009      	b.n	8000cd0 <HAL_I2C_Init+0xc8>
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000cc2:	fb02 f303 	mul.w	r3, r2, r3
 8000cc6:	4a63      	ldr	r2, [pc, #396]	; (8000e54 <HAL_I2C_Init+0x24c>)
 8000cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ccc:	099b      	lsrs	r3, r3, #6
 8000cce:	3301      	adds	r3, #1
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	6812      	ldr	r2, [r2, #0]
 8000cd4:	430b      	orrs	r3, r1
 8000cd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000ce2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	4956      	ldr	r1, [pc, #344]	; (8000e44 <HAL_I2C_Init+0x23c>)
 8000cec:	428b      	cmp	r3, r1
 8000cee:	d80d      	bhi.n	8000d0c <HAL_I2C_Init+0x104>
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	1e59      	subs	r1, r3, #1
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cfe:	3301      	adds	r3, #1
 8000d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d04:	2b04      	cmp	r3, #4
 8000d06:	bf38      	it	cc
 8000d08:	2304      	movcc	r3, #4
 8000d0a:	e04f      	b.n	8000dac <HAL_I2C_Init+0x1a4>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d111      	bne.n	8000d38 <HAL_I2C_Init+0x130>
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	1e58      	subs	r0, r3, #1
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6859      	ldr	r1, [r3, #4]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	440b      	add	r3, r1
 8000d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d26:	3301      	adds	r3, #1
 8000d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	bf0c      	ite	eq
 8000d30:	2301      	moveq	r3, #1
 8000d32:	2300      	movne	r3, #0
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	e012      	b.n	8000d5e <HAL_I2C_Init+0x156>
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	1e58      	subs	r0, r3, #1
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6859      	ldr	r1, [r3, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	440b      	add	r3, r1
 8000d46:	0099      	lsls	r1, r3, #2
 8000d48:	440b      	add	r3, r1
 8000d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d4e:	3301      	adds	r3, #1
 8000d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	bf0c      	ite	eq
 8000d58:	2301      	moveq	r3, #1
 8000d5a:	2300      	movne	r3, #0
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_I2C_Init+0x15e>
 8000d62:	2301      	movs	r3, #1
 8000d64:	e022      	b.n	8000dac <HAL_I2C_Init+0x1a4>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d10e      	bne.n	8000d8c <HAL_I2C_Init+0x184>
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	1e58      	subs	r0, r3, #1
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6859      	ldr	r1, [r3, #4]
 8000d76:	460b      	mov	r3, r1
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	440b      	add	r3, r1
 8000d7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d80:	3301      	adds	r3, #1
 8000d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d8a:	e00f      	b.n	8000dac <HAL_I2C_Init+0x1a4>
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	1e58      	subs	r0, r3, #1
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6859      	ldr	r1, [r3, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	440b      	add	r3, r1
 8000d9a:	0099      	lsls	r1, r3, #2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000da2:	3301      	adds	r3, #1
 8000da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000da8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dac:	6879      	ldr	r1, [r7, #4]
 8000dae:	6809      	ldr	r1, [r1, #0]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	69da      	ldr	r2, [r3, #28]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6a1b      	ldr	r3, [r3, #32]
 8000dc6:	431a      	orrs	r2, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000dda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	6911      	ldr	r1, [r2, #16]
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	68d2      	ldr	r2, [r2, #12]
 8000de6:	4311      	orrs	r1, r2
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	6812      	ldr	r2, [r2, #0]
 8000dec:	430b      	orrs	r3, r1
 8000dee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	695a      	ldr	r2, [r3, #20]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	431a      	orrs	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f042 0201 	orr.w	r2, r2, #1
 8000e1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2220      	movs	r2, #32
 8000e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	000186a0 	.word	0x000186a0
 8000e48:	001e847f 	.word	0x001e847f
 8000e4c:	003d08ff 	.word	0x003d08ff
 8000e50:	431bde83 	.word	0x431bde83
 8000e54:	10624dd3 	.word	0x10624dd3

08000e58 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af02      	add	r7, sp, #8
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	4608      	mov	r0, r1
 8000e62:	4611      	mov	r1, r2
 8000e64:	461a      	mov	r2, r3
 8000e66:	4603      	mov	r3, r0
 8000e68:	817b      	strh	r3, [r7, #10]
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	813b      	strh	r3, [r7, #8]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000e72:	f7ff f9c3 	bl	80001fc <HAL_GetTick>
 8000e76:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	2b20      	cmp	r3, #32
 8000e82:	f040 80d9 	bne.w	8001038 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	2319      	movs	r3, #25
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	496d      	ldr	r1, [pc, #436]	; (8001044 <HAL_I2C_Mem_Write+0x1ec>)
 8000e90:	68f8      	ldr	r0, [r7, #12]
 8000e92:	f000 fc6b 	bl	800176c <I2C_WaitOnFlagUntilTimeout>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	e0cc      	b.n	800103a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d101      	bne.n	8000eae <HAL_I2C_Mem_Write+0x56>
 8000eaa:	2302      	movs	r3, #2
 8000eac:	e0c5      	b.n	800103a <HAL_I2C_Mem_Write+0x1e2>
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d007      	beq.n	8000ed4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f042 0201 	orr.w	r2, r2, #1
 8000ed2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ee2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2221      	movs	r2, #33	; 0x21
 8000ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2240      	movs	r2, #64	; 0x40
 8000ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	6a3a      	ldr	r2, [r7, #32]
 8000efe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4a4d      	ldr	r2, [pc, #308]	; (8001048 <HAL_I2C_Mem_Write+0x1f0>)
 8000f14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000f16:	88f8      	ldrh	r0, [r7, #6]
 8000f18:	893a      	ldrh	r2, [r7, #8]
 8000f1a:	8979      	ldrh	r1, [r7, #10]
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	9301      	str	r3, [sp, #4]
 8000f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	4603      	mov	r3, r0
 8000f26:	68f8      	ldr	r0, [r7, #12]
 8000f28:	f000 fac6 	bl	80014b8 <I2C_RequestMemoryWrite>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d052      	beq.n	8000fd8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e081      	b.n	800103a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f36:	697a      	ldr	r2, [r7, #20]
 8000f38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f3a:	68f8      	ldr	r0, [r7, #12]
 8000f3c:	f000 fcec 	bl	8001918 <I2C_WaitOnTXEFlagUntilTimeout>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d00d      	beq.n	8000f62 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	d107      	bne.n	8000f5e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e06b      	b.n	800103a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f66:	781a      	ldrb	r2, [r3, #0]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f72:	1c5a      	adds	r2, r3, #1
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	695b      	ldr	r3, [r3, #20]
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	2b04      	cmp	r3, #4
 8000f9e:	d11b      	bne.n	8000fd8 <HAL_I2C_Mem_Write+0x180>
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d017      	beq.n	8000fd8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fac:	781a      	ldrb	r2, [r3, #0]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb8:	1c5a      	adds	r2, r3, #1
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1aa      	bne.n	8000f36 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fe0:	697a      	ldr	r2, [r7, #20]
 8000fe2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000fe4:	68f8      	ldr	r0, [r7, #12]
 8000fe6:	f000 fcd8 	bl	800199a <I2C_WaitOnBTFFlagUntilTimeout>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d00d      	beq.n	800100c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	2b04      	cmp	r3, #4
 8000ff6:	d107      	bne.n	8001008 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001006:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e016      	b.n	800103a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800101a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2220      	movs	r2, #32
 8001020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2200      	movs	r2, #0
 8001028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2200      	movs	r2, #0
 8001030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001034:	2300      	movs	r3, #0
 8001036:	e000      	b.n	800103a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001038:	2302      	movs	r3, #2
  }
}
 800103a:	4618      	mov	r0, r3
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	00100002 	.word	0x00100002
 8001048:	ffff0000 	.word	0xffff0000

0800104c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08c      	sub	sp, #48	; 0x30
 8001050:	af02      	add	r7, sp, #8
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	4608      	mov	r0, r1
 8001056:	4611      	mov	r1, r2
 8001058:	461a      	mov	r2, r3
 800105a:	4603      	mov	r3, r0
 800105c:	817b      	strh	r3, [r7, #10]
 800105e:	460b      	mov	r3, r1
 8001060:	813b      	strh	r3, [r7, #8]
 8001062:	4613      	mov	r3, r2
 8001064:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001066:	f7ff f8c9 	bl	80001fc <HAL_GetTick>
 800106a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b20      	cmp	r3, #32
 8001076:	f040 8218 	bne.w	80014aa <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	2319      	movs	r3, #25
 8001080:	2201      	movs	r2, #1
 8001082:	4981      	ldr	r1, [pc, #516]	; (8001288 <HAL_I2C_Mem_Read+0x23c>)
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f000 fb71 	bl	800176c <I2C_WaitOnFlagUntilTimeout>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001090:	2302      	movs	r3, #2
 8001092:	e20b      	b.n	80014ac <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800109a:	2b01      	cmp	r3, #1
 800109c:	d101      	bne.n	80010a2 <HAL_I2C_Mem_Read+0x56>
 800109e:	2302      	movs	r3, #2
 80010a0:	e204      	b.n	80014ac <HAL_I2C_Mem_Read+0x460>
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2201      	movs	r2, #1
 80010a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d007      	beq.n	80010c8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f042 0201 	orr.w	r2, r2, #1
 80010c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2222      	movs	r2, #34	; 0x22
 80010dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2240      	movs	r2, #64	; 0x40
 80010e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2200      	movs	r2, #0
 80010ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80010f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010fe:	b29a      	uxth	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4a61      	ldr	r2, [pc, #388]	; (800128c <HAL_I2C_Mem_Read+0x240>)
 8001108:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800110a:	88f8      	ldrh	r0, [r7, #6]
 800110c:	893a      	ldrh	r2, [r7, #8]
 800110e:	8979      	ldrh	r1, [r7, #10]
 8001110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	4603      	mov	r3, r0
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f000 fa56 	bl	80015cc <I2C_RequestMemoryRead>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e1c0      	b.n	80014ac <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800112e:	2b00      	cmp	r3, #0
 8001130:	d113      	bne.n	800115a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	623b      	str	r3, [r7, #32]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	623b      	str	r3, [r7, #32]
 8001146:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	e194      	b.n	8001484 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800115e:	2b01      	cmp	r3, #1
 8001160:	d11d      	bne.n	800119e <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001170:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001172:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	61fb      	str	r3, [r7, #28]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	61fb      	str	r3, [r7, #28]
 8001188:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001198:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800119a:	b662      	cpsie	i
 800119c:	e172      	b.n	8001484 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d11d      	bne.n	80011e2 <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80011b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80011b6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011b8:	2300      	movs	r3, #0
 80011ba:	61bb      	str	r3, [r7, #24]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	61bb      	str	r3, [r7, #24]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	61bb      	str	r3, [r7, #24]
 80011cc:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80011de:	b662      	cpsie	i
 80011e0:	e150      	b.n	8001484 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80011f0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001208:	e13c      	b.n	8001484 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800120e:	2b03      	cmp	r3, #3
 8001210:	f200 80f5 	bhi.w	80013fe <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001218:	2b01      	cmp	r3, #1
 800121a:	d123      	bne.n	8001264 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800121c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800121e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f000 fbfb 	bl	8001a1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e13d      	b.n	80014ac <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	691a      	ldr	r2, [r3, #16]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	1c5a      	adds	r2, r3, #1
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800124c:	3b01      	subs	r3, #1
 800124e:	b29a      	uxth	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001258:	b29b      	uxth	r3, r3
 800125a:	3b01      	subs	r3, #1
 800125c:	b29a      	uxth	r2, r3
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001262:	e10f      	b.n	8001484 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001268:	2b02      	cmp	r3, #2
 800126a:	d150      	bne.n	800130e <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001272:	2200      	movs	r2, #0
 8001274:	4906      	ldr	r1, [pc, #24]	; (8001290 <HAL_I2C_Mem_Read+0x244>)
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f000 fa78 	bl	800176c <I2C_WaitOnFlagUntilTimeout>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d008      	beq.n	8001294 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e112      	b.n	80014ac <HAL_I2C_Mem_Read+0x460>
 8001286:	bf00      	nop
 8001288:	00100002 	.word	0x00100002
 800128c:	ffff0000 	.word	0xffff0000
 8001290:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001294:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012a4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	691a      	ldr	r2, [r3, #16]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b8:	1c5a      	adds	r2, r3, #1
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012c2:	3b01      	subs	r3, #1
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	3b01      	subs	r3, #1
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80012d8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	691a      	ldr	r2, [r3, #16]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ec:	1c5a      	adds	r2, r3, #1
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f6:	3b01      	subs	r3, #1
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001302:	b29b      	uxth	r3, r3
 8001304:	3b01      	subs	r3, #1
 8001306:	b29a      	uxth	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800130c:	e0ba      	b.n	8001484 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001314:	2200      	movs	r2, #0
 8001316:	4967      	ldr	r1, [pc, #412]	; (80014b4 <HAL_I2C_Mem_Read+0x468>)
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f000 fa27 	bl	800176c <I2C_WaitOnFlagUntilTimeout>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e0c1      	b.n	80014ac <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001336:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001338:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	691a      	ldr	r2, [r3, #16]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	1c5a      	adds	r2, r3, #1
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001356:	3b01      	subs	r3, #1
 8001358:	b29a      	uxth	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001362:	b29b      	uxth	r3, r3
 8001364:	3b01      	subs	r3, #1
 8001366:	b29a      	uxth	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001372:	2200      	movs	r2, #0
 8001374:	494f      	ldr	r1, [pc, #316]	; (80014b4 <HAL_I2C_Mem_Read+0x468>)
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f000 f9f8 	bl	800176c <I2C_WaitOnFlagUntilTimeout>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e092      	b.n	80014ac <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001394:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	691a      	ldr	r2, [r3, #16]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	1c5a      	adds	r2, r3, #1
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013b2:	3b01      	subs	r3, #1
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013be:	b29b      	uxth	r3, r3
 80013c0:	3b01      	subs	r3, #1
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80013c8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	691a      	ldr	r2, [r3, #16]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	1c5a      	adds	r2, r3, #1
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013e6:	3b01      	subs	r3, #1
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	3b01      	subs	r3, #1
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80013fc:	e042      	b.n	8001484 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001400:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	f000 fb0a 	bl	8001a1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e04c      	b.n	80014ac <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	691a      	ldr	r2, [r3, #16]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001424:	1c5a      	adds	r2, r3, #1
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800142e:	3b01      	subs	r3, #1
 8001430:	b29a      	uxth	r2, r3
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800143a:	b29b      	uxth	r3, r3
 800143c:	3b01      	subs	r3, #1
 800143e:	b29a      	uxth	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	2b04      	cmp	r3, #4
 8001450:	d118      	bne.n	8001484 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	691a      	ldr	r2, [r3, #16]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	1c5a      	adds	r2, r3, #1
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800146e:	3b01      	subs	r3, #1
 8001470:	b29a      	uxth	r2, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800147a:	b29b      	uxth	r3, r3
 800147c:	3b01      	subs	r3, #1
 800147e:	b29a      	uxth	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001488:	2b00      	cmp	r3, #0
 800148a:	f47f aebe 	bne.w	800120a <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2220      	movs	r2, #32
 8001492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80014a6:	2300      	movs	r3, #0
 80014a8:	e000      	b.n	80014ac <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 80014aa:	2302      	movs	r3, #2
  }
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3728      	adds	r7, #40	; 0x28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	00010004 	.word	0x00010004

080014b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af02      	add	r7, sp, #8
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	4608      	mov	r0, r1
 80014c2:	4611      	mov	r1, r2
 80014c4:	461a      	mov	r2, r3
 80014c6:	4603      	mov	r3, r0
 80014c8:	817b      	strh	r3, [r7, #10]
 80014ca:	460b      	mov	r3, r1
 80014cc:	813b      	strh	r3, [r7, #8]
 80014ce:	4613      	mov	r3, r2
 80014d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f000 f93c 	bl	800176c <I2C_WaitOnFlagUntilTimeout>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e05f      	b.n	80015be <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80014fe:	897b      	ldrh	r3, [r7, #10]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	461a      	mov	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800150c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	6a3a      	ldr	r2, [r7, #32]
 8001512:	492d      	ldr	r1, [pc, #180]	; (80015c8 <I2C_RequestMemoryWrite+0x110>)
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f000 f980 	bl	800181a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e04c      	b.n	80015be <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800153a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800153c:	6a39      	ldr	r1, [r7, #32]
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f000 f9ea 	bl	8001918 <I2C_WaitOnTXEFlagUntilTimeout>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00d      	beq.n	8001566 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	2b04      	cmp	r3, #4
 8001550:	d107      	bne.n	8001562 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001560:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e02b      	b.n	80015be <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001566:	88fb      	ldrh	r3, [r7, #6]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d105      	bne.n	8001578 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800156c:	893b      	ldrh	r3, [r7, #8]
 800156e:	b2da      	uxtb	r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	611a      	str	r2, [r3, #16]
 8001576:	e021      	b.n	80015bc <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001578:	893b      	ldrh	r3, [r7, #8]
 800157a:	0a1b      	lsrs	r3, r3, #8
 800157c:	b29b      	uxth	r3, r3
 800157e:	b2da      	uxtb	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001588:	6a39      	ldr	r1, [r7, #32]
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f000 f9c4 	bl	8001918 <I2C_WaitOnTXEFlagUntilTimeout>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00d      	beq.n	80015b2 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	2b04      	cmp	r3, #4
 800159c:	d107      	bne.n	80015ae <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e005      	b.n	80015be <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80015b2:	893b      	ldrh	r3, [r7, #8]
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	00010002 	.word	0x00010002

080015cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af02      	add	r7, sp, #8
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	4608      	mov	r0, r1
 80015d6:	4611      	mov	r1, r2
 80015d8:	461a      	mov	r2, r3
 80015da:	4603      	mov	r3, r0
 80015dc:	817b      	strh	r3, [r7, #10]
 80015de:	460b      	mov	r3, r1
 80015e0:	813b      	strh	r3, [r7, #8]
 80015e2:	4613      	mov	r3, r2
 80015e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80015f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001604:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	6a3b      	ldr	r3, [r7, #32]
 800160c:	2200      	movs	r2, #0
 800160e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f000 f8aa 	bl	800176c <I2C_WaitOnFlagUntilTimeout>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e09e      	b.n	8001760 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001622:	897b      	ldrh	r3, [r7, #10]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	461a      	mov	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001630:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	6a3a      	ldr	r2, [r7, #32]
 8001636:	494c      	ldr	r1, [pc, #304]	; (8001768 <I2C_RequestMemoryRead+0x19c>)
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f000 f8ee 	bl	800181a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e08b      	b.n	8001760 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800165e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001660:	6a39      	ldr	r1, [r7, #32]
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f000 f958 	bl	8001918 <I2C_WaitOnTXEFlagUntilTimeout>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00d      	beq.n	800168a <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	2b04      	cmp	r3, #4
 8001674:	d107      	bne.n	8001686 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001684:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e06a      	b.n	8001760 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d105      	bne.n	800169c <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001690:	893b      	ldrh	r3, [r7, #8]
 8001692:	b2da      	uxtb	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	611a      	str	r2, [r3, #16]
 800169a:	e021      	b.n	80016e0 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800169c:	893b      	ldrh	r3, [r7, #8]
 800169e:	0a1b      	lsrs	r3, r3, #8
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ac:	6a39      	ldr	r1, [r7, #32]
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f000 f932 	bl	8001918 <I2C_WaitOnTXEFlagUntilTimeout>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00d      	beq.n	80016d6 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	2b04      	cmp	r3, #4
 80016c0:	d107      	bne.n	80016d2 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e044      	b.n	8001760 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80016d6:	893b      	ldrh	r3, [r7, #8]
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e2:	6a39      	ldr	r1, [r7, #32]
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f000 f917 	bl	8001918 <I2C_WaitOnTXEFlagUntilTimeout>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00d      	beq.n	800170c <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	2b04      	cmp	r3, #4
 80016f6:	d107      	bne.n	8001708 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001706:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e029      	b.n	8001760 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800171a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	6a3b      	ldr	r3, [r7, #32]
 8001722:	2200      	movs	r2, #0
 8001724:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f000 f81f 	bl	800176c <I2C_WaitOnFlagUntilTimeout>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e013      	b.n	8001760 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001738:	897b      	ldrh	r3, [r7, #10]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	b2da      	uxtb	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	6a3a      	ldr	r2, [r7, #32]
 800174c:	4906      	ldr	r1, [pc, #24]	; (8001768 <I2C_RequestMemoryRead+0x19c>)
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f000 f863 	bl	800181a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	00010002 	.word	0x00010002

0800176c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	4613      	mov	r3, r2
 800177a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800177c:	e025      	b.n	80017ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001784:	d021      	beq.n	80017ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001786:	f7fe fd39 	bl	80001fc <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d302      	bcc.n	800179c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d116      	bne.n	80017ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2200      	movs	r2, #0
 80017a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2220      	movs	r2, #32
 80017a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f043 0220 	orr.w	r2, r3, #32
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e023      	b.n	8001812 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	0c1b      	lsrs	r3, r3, #16
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d10d      	bne.n	80017f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	43da      	mvns	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4013      	ands	r3, r2
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	bf0c      	ite	eq
 80017e6:	2301      	moveq	r3, #1
 80017e8:	2300      	movne	r3, #0
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	461a      	mov	r2, r3
 80017ee:	e00c      	b.n	800180a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	43da      	mvns	r2, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4013      	ands	r3, r2
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	bf0c      	ite	eq
 8001802:	2301      	moveq	r3, #1
 8001804:	2300      	movne	r3, #0
 8001806:	b2db      	uxtb	r3, r3
 8001808:	461a      	mov	r2, r3
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	429a      	cmp	r2, r3
 800180e:	d0b6      	beq.n	800177e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b084      	sub	sp, #16
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001828:	e051      	b.n	80018ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001838:	d123      	bne.n	8001882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001848:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001852:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2200      	movs	r2, #0
 8001858:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2220      	movs	r2, #32
 800185e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f043 0204 	orr.w	r2, r3, #4
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e046      	b.n	8001910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001888:	d021      	beq.n	80018ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800188a:	f7fe fcb7 	bl	80001fc <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	429a      	cmp	r2, r3
 8001898:	d302      	bcc.n	80018a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d116      	bne.n	80018ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2200      	movs	r2, #0
 80018a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2220      	movs	r2, #32
 80018aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	f043 0220 	orr.w	r2, r3, #32
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e020      	b.n	8001910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	0c1b      	lsrs	r3, r3, #16
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d10c      	bne.n	80018f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	43da      	mvns	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	4013      	ands	r3, r2
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bf14      	ite	ne
 80018ea:	2301      	movne	r3, #1
 80018ec:	2300      	moveq	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	e00b      	b.n	800190a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	43da      	mvns	r2, r3
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	4013      	ands	r3, r2
 80018fe:	b29b      	uxth	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	bf14      	ite	ne
 8001904:	2301      	movne	r3, #1
 8001906:	2300      	moveq	r3, #0
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d18d      	bne.n	800182a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001924:	e02d      	b.n	8001982 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 f8ce 	bl	8001ac8 <I2C_IsAcknowledgeFailed>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e02d      	b.n	8001992 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800193c:	d021      	beq.n	8001982 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800193e:	f7fe fc5d 	bl	80001fc <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	68ba      	ldr	r2, [r7, #8]
 800194a:	429a      	cmp	r2, r3
 800194c:	d302      	bcc.n	8001954 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d116      	bne.n	8001982 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2220      	movs	r2, #32
 800195e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f043 0220 	orr.w	r2, r3, #32
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e007      	b.n	8001992 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198c:	2b80      	cmp	r3, #128	; 0x80
 800198e:	d1ca      	bne.n	8001926 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b084      	sub	sp, #16
 800199e:	af00      	add	r7, sp, #0
 80019a0:	60f8      	str	r0, [r7, #12]
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80019a6:	e02d      	b.n	8001a04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f000 f88d 	bl	8001ac8 <I2C_IsAcknowledgeFailed>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e02d      	b.n	8001a14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019be:	d021      	beq.n	8001a04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019c0:	f7fe fc1c 	bl	80001fc <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d302      	bcc.n	80019d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d116      	bne.n	8001a04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2220      	movs	r2, #32
 80019e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	f043 0220 	orr.w	r2, r3, #32
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e007      	b.n	8001a14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d1ca      	bne.n	80019a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a28:	e042      	b.n	8001ab0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	f003 0310 	and.w	r3, r3, #16
 8001a34:	2b10      	cmp	r3, #16
 8001a36:	d119      	bne.n	8001a6c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f06f 0210 	mvn.w	r2, #16
 8001a40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2220      	movs	r2, #32
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e029      	b.n	8001ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a6c:	f7fe fbc6 	bl	80001fc <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d302      	bcc.n	8001a82 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d116      	bne.n	8001ab0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2200      	movs	r2, #0
 8001a86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	f043 0220 	orr.w	r2, r3, #32
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e007      	b.n	8001ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aba:	2b40      	cmp	r3, #64	; 0x40
 8001abc:	d1b5      	bne.n	8001a2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ade:	d11b      	bne.n	8001b18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ae8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2220      	movs	r2, #32
 8001af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	f043 0204 	orr.w	r2, r3, #4
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e000      	b.n	8001b1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e26c      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 8087 	beq.w	8001c52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b44:	4b92      	ldr	r3, [pc, #584]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 030c 	and.w	r3, r3, #12
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	d00c      	beq.n	8001b6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b50:	4b8f      	ldr	r3, [pc, #572]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 030c 	and.w	r3, r3, #12
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	d112      	bne.n	8001b82 <HAL_RCC_OscConfig+0x5e>
 8001b5c:	4b8c      	ldr	r3, [pc, #560]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b68:	d10b      	bne.n	8001b82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b6a:	4b89      	ldr	r3, [pc, #548]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d06c      	beq.n	8001c50 <HAL_RCC_OscConfig+0x12c>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d168      	bne.n	8001c50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e246      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b8a:	d106      	bne.n	8001b9a <HAL_RCC_OscConfig+0x76>
 8001b8c:	4b80      	ldr	r3, [pc, #512]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a7f      	ldr	r2, [pc, #508]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	e02e      	b.n	8001bf8 <HAL_RCC_OscConfig+0xd4>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10c      	bne.n	8001bbc <HAL_RCC_OscConfig+0x98>
 8001ba2:	4b7b      	ldr	r3, [pc, #492]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a7a      	ldr	r2, [pc, #488]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	4b78      	ldr	r3, [pc, #480]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a77      	ldr	r2, [pc, #476]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	e01d      	b.n	8001bf8 <HAL_RCC_OscConfig+0xd4>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bc4:	d10c      	bne.n	8001be0 <HAL_RCC_OscConfig+0xbc>
 8001bc6:	4b72      	ldr	r3, [pc, #456]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a71      	ldr	r2, [pc, #452]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	4b6f      	ldr	r3, [pc, #444]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a6e      	ldr	r2, [pc, #440]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	e00b      	b.n	8001bf8 <HAL_RCC_OscConfig+0xd4>
 8001be0:	4b6b      	ldr	r3, [pc, #428]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a6a      	ldr	r2, [pc, #424]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	4b68      	ldr	r3, [pc, #416]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a67      	ldr	r2, [pc, #412]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d013      	beq.n	8001c28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7fe fafc 	bl	80001fc <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c08:	f7fe faf8 	bl	80001fc <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b64      	cmp	r3, #100	; 0x64
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e1fa      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1a:	4b5d      	ldr	r3, [pc, #372]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0xe4>
 8001c26:	e014      	b.n	8001c52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7fe fae8 	bl	80001fc <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c30:	f7fe fae4 	bl	80001fc <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b64      	cmp	r3, #100	; 0x64
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e1e6      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c42:	4b53      	ldr	r3, [pc, #332]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0x10c>
 8001c4e:	e000      	b.n	8001c52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d063      	beq.n	8001d26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c5e:	4b4c      	ldr	r3, [pc, #304]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 030c 	and.w	r3, r3, #12
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00b      	beq.n	8001c82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c6a:	4b49      	ldr	r3, [pc, #292]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d11c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x18c>
 8001c76:	4b46      	ldr	r3, [pc, #280]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d116      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c82:	4b43      	ldr	r3, [pc, #268]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d005      	beq.n	8001c9a <HAL_RCC_OscConfig+0x176>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d001      	beq.n	8001c9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e1ba      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9a:	4b3d      	ldr	r3, [pc, #244]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4939      	ldr	r1, [pc, #228]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cae:	e03a      	b.n	8001d26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d020      	beq.n	8001cfa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb8:	4b36      	ldr	r3, [pc, #216]	; (8001d94 <HAL_RCC_OscConfig+0x270>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbe:	f7fe fa9d 	bl	80001fc <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc6:	f7fe fa99 	bl	80001fc <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e19b      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd8:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce4:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	4927      	ldr	r1, [pc, #156]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	600b      	str	r3, [r1, #0]
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cfa:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <HAL_RCC_OscConfig+0x270>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d00:	f7fe fa7c 	bl	80001fc <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d08:	f7fe fa78 	bl	80001fc <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e17a      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1a:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d03a      	beq.n	8001da8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d019      	beq.n	8001d6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d3a:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d40:	f7fe fa5c 	bl	80001fc <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d48:	f7fe fa58 	bl	80001fc <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e15a      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d66:	2001      	movs	r0, #1
 8001d68:	f000 fada 	bl	8002320 <RCC_Delay>
 8001d6c:	e01c      	b.n	8001da8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d74:	f7fe fa42 	bl	80001fc <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d7a:	e00f      	b.n	8001d9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d7c:	f7fe fa3e 	bl	80001fc <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d908      	bls.n	8001d9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e140      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000
 8001d94:	42420000 	.word	0x42420000
 8001d98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d9c:	4b9e      	ldr	r3, [pc, #632]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1e9      	bne.n	8001d7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 80a6 	beq.w	8001f02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001db6:	2300      	movs	r3, #0
 8001db8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dba:	4b97      	ldr	r3, [pc, #604]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10d      	bne.n	8001de2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc6:	4b94      	ldr	r3, [pc, #592]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	4a93      	ldr	r2, [pc, #588]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	61d3      	str	r3, [r2, #28]
 8001dd2:	4b91      	ldr	r3, [pc, #580]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dde:	2301      	movs	r3, #1
 8001de0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de2:	4b8e      	ldr	r3, [pc, #568]	; (800201c <HAL_RCC_OscConfig+0x4f8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d118      	bne.n	8001e20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dee:	4b8b      	ldr	r3, [pc, #556]	; (800201c <HAL_RCC_OscConfig+0x4f8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a8a      	ldr	r2, [pc, #552]	; (800201c <HAL_RCC_OscConfig+0x4f8>)
 8001df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dfa:	f7fe f9ff 	bl	80001fc <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e02:	f7fe f9fb 	bl	80001fc <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b64      	cmp	r3, #100	; 0x64
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e0fd      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e14:	4b81      	ldr	r3, [pc, #516]	; (800201c <HAL_RCC_OscConfig+0x4f8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d106      	bne.n	8001e36 <HAL_RCC_OscConfig+0x312>
 8001e28:	4b7b      	ldr	r3, [pc, #492]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	4a7a      	ldr	r2, [pc, #488]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	6213      	str	r3, [r2, #32]
 8001e34:	e02d      	b.n	8001e92 <HAL_RCC_OscConfig+0x36e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10c      	bne.n	8001e58 <HAL_RCC_OscConfig+0x334>
 8001e3e:	4b76      	ldr	r3, [pc, #472]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	4a75      	ldr	r2, [pc, #468]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001e44:	f023 0301 	bic.w	r3, r3, #1
 8001e48:	6213      	str	r3, [r2, #32]
 8001e4a:	4b73      	ldr	r3, [pc, #460]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	4a72      	ldr	r2, [pc, #456]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	f023 0304 	bic.w	r3, r3, #4
 8001e54:	6213      	str	r3, [r2, #32]
 8001e56:	e01c      	b.n	8001e92 <HAL_RCC_OscConfig+0x36e>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	2b05      	cmp	r3, #5
 8001e5e:	d10c      	bne.n	8001e7a <HAL_RCC_OscConfig+0x356>
 8001e60:	4b6d      	ldr	r3, [pc, #436]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	4a6c      	ldr	r2, [pc, #432]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001e66:	f043 0304 	orr.w	r3, r3, #4
 8001e6a:	6213      	str	r3, [r2, #32]
 8001e6c:	4b6a      	ldr	r3, [pc, #424]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	4a69      	ldr	r2, [pc, #420]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	6213      	str	r3, [r2, #32]
 8001e78:	e00b      	b.n	8001e92 <HAL_RCC_OscConfig+0x36e>
 8001e7a:	4b67      	ldr	r3, [pc, #412]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	4a66      	ldr	r2, [pc, #408]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001e80:	f023 0301 	bic.w	r3, r3, #1
 8001e84:	6213      	str	r3, [r2, #32]
 8001e86:	4b64      	ldr	r3, [pc, #400]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	4a63      	ldr	r2, [pc, #396]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001e8c:	f023 0304 	bic.w	r3, r3, #4
 8001e90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d015      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9a:	f7fe f9af 	bl	80001fc <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea0:	e00a      	b.n	8001eb8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea2:	f7fe f9ab 	bl	80001fc <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e0ab      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb8:	4b57      	ldr	r3, [pc, #348]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0ee      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x37e>
 8001ec4:	e014      	b.n	8001ef0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec6:	f7fe f999 	bl	80001fc <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ecc:	e00a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ece:	f7fe f995 	bl	80001fc <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e095      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee4:	4b4c      	ldr	r3, [pc, #304]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1ee      	bne.n	8001ece <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ef0:	7dfb      	ldrb	r3, [r7, #23]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d105      	bne.n	8001f02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef6:	4b48      	ldr	r3, [pc, #288]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	4a47      	ldr	r2, [pc, #284]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 8081 	beq.w	800200e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f0c:	4b42      	ldr	r3, [pc, #264]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 030c 	and.w	r3, r3, #12
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d061      	beq.n	8001fdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d146      	bne.n	8001fae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f20:	4b3f      	ldr	r3, [pc, #252]	; (8002020 <HAL_RCC_OscConfig+0x4fc>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7fe f969 	bl	80001fc <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2e:	f7fe f965 	bl	80001fc <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e067      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f40:	4b35      	ldr	r3, [pc, #212]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f0      	bne.n	8001f2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f54:	d108      	bne.n	8001f68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f56:	4b30      	ldr	r3, [pc, #192]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	492d      	ldr	r1, [pc, #180]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f68:	4b2b      	ldr	r3, [pc, #172]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a19      	ldr	r1, [r3, #32]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	430b      	orrs	r3, r1
 8001f7a:	4927      	ldr	r1, [pc, #156]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f80:	4b27      	ldr	r3, [pc, #156]	; (8002020 <HAL_RCC_OscConfig+0x4fc>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f86:	f7fe f939 	bl	80001fc <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8e:	f7fe f935 	bl	80001fc <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e037      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x46a>
 8001fac:	e02f      	b.n	800200e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fae:	4b1c      	ldr	r3, [pc, #112]	; (8002020 <HAL_RCC_OscConfig+0x4fc>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb4:	f7fe f922 	bl	80001fc <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fbc:	f7fe f91e 	bl	80001fc <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e020      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fce:	4b12      	ldr	r3, [pc, #72]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0x498>
 8001fda:	e018      	b.n	800200e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e013      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d106      	bne.n	800200a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002006:	429a      	cmp	r2, r3
 8002008:	d001      	beq.n	800200e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40021000 	.word	0x40021000
 800201c:	40007000 	.word	0x40007000
 8002020:	42420060 	.word	0x42420060

08002024 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0d0      	b.n	80021da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002038:	4b6a      	ldr	r3, [pc, #424]	; (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d910      	bls.n	8002068 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002046:	4b67      	ldr	r3, [pc, #412]	; (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 0207 	bic.w	r2, r3, #7
 800204e:	4965      	ldr	r1, [pc, #404]	; (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	4313      	orrs	r3, r2
 8002054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002056:	4b63      	ldr	r3, [pc, #396]	; (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d001      	beq.n	8002068 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0b8      	b.n	80021da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d020      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002080:	4b59      	ldr	r3, [pc, #356]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	4a58      	ldr	r2, [pc, #352]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800208a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0308 	and.w	r3, r3, #8
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002098:	4b53      	ldr	r3, [pc, #332]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	4a52      	ldr	r2, [pc, #328]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 800209e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a4:	4b50      	ldr	r3, [pc, #320]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	494d      	ldr	r1, [pc, #308]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d040      	beq.n	8002144 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d107      	bne.n	80020da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ca:	4b47      	ldr	r3, [pc, #284]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d115      	bne.n	8002102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e07f      	b.n	80021da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d107      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020e2:	4b41      	ldr	r3, [pc, #260]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d109      	bne.n	8002102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e073      	b.n	80021da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f2:	4b3d      	ldr	r3, [pc, #244]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e06b      	b.n	80021da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002102:	4b39      	ldr	r3, [pc, #228]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f023 0203 	bic.w	r2, r3, #3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	4936      	ldr	r1, [pc, #216]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	4313      	orrs	r3, r2
 8002112:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002114:	f7fe f872 	bl	80001fc <HAL_GetTick>
 8002118:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211a:	e00a      	b.n	8002132 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800211c:	f7fe f86e 	bl	80001fc <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	f241 3288 	movw	r2, #5000	; 0x1388
 800212a:	4293      	cmp	r3, r2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e053      	b.n	80021da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002132:	4b2d      	ldr	r3, [pc, #180]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 020c 	and.w	r2, r3, #12
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	429a      	cmp	r2, r3
 8002142:	d1eb      	bne.n	800211c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002144:	4b27      	ldr	r3, [pc, #156]	; (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	d210      	bcs.n	8002174 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002152:	4b24      	ldr	r3, [pc, #144]	; (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 0207 	bic.w	r2, r3, #7
 800215a:	4922      	ldr	r1, [pc, #136]	; (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	4313      	orrs	r3, r2
 8002160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002162:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d001      	beq.n	8002174 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e032      	b.n	80021da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b00      	cmp	r3, #0
 800217e:	d008      	beq.n	8002192 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002180:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4916      	ldr	r1, [pc, #88]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	4313      	orrs	r3, r2
 8002190:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b00      	cmp	r3, #0
 800219c:	d009      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800219e:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	490e      	ldr	r1, [pc, #56]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021b2:	f000 f821 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 80021b6:	4601      	mov	r1, r0
 80021b8:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x1c8>)
 80021c4:	5cd3      	ldrb	r3, [r2, r3]
 80021c6:	fa21 f303 	lsr.w	r3, r1, r3
 80021ca:	4a09      	ldr	r2, [pc, #36]	; (80021f0 <HAL_RCC_ClockConfig+0x1cc>)
 80021cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ce:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <HAL_RCC_ClockConfig+0x1d0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fd ffd0 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40022000 	.word	0x40022000
 80021e8:	40021000 	.word	0x40021000
 80021ec:	08003c98 	.word	0x08003c98
 80021f0:	20000008 	.word	0x20000008
 80021f4:	20000000 	.word	0x20000000

080021f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f8:	b490      	push	{r4, r7}
 80021fa:	b08a      	sub	sp, #40	; 0x28
 80021fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021fe:	4b2a      	ldr	r3, [pc, #168]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002200:	1d3c      	adds	r4, r7, #4
 8002202:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002204:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002208:	4b28      	ldr	r3, [pc, #160]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb4>)
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
 8002212:	2300      	movs	r3, #0
 8002214:	61bb      	str	r3, [r7, #24]
 8002216:	2300      	movs	r3, #0
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002222:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b04      	cmp	r3, #4
 8002230:	d002      	beq.n	8002238 <HAL_RCC_GetSysClockFreq+0x40>
 8002232:	2b08      	cmp	r3, #8
 8002234:	d003      	beq.n	800223e <HAL_RCC_GetSysClockFreq+0x46>
 8002236:	e02d      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002238:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800223a:	623b      	str	r3, [r7, #32]
      break;
 800223c:	e02d      	b.n	800229a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	0c9b      	lsrs	r3, r3, #18
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800224a:	4413      	add	r3, r2
 800224c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002250:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d013      	beq.n	8002284 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800225c:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	0c5b      	lsrs	r3, r3, #17
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800226a:	4413      	add	r3, r2
 800226c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002270:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	4a0f      	ldr	r2, [pc, #60]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002276:	fb02 f203 	mul.w	r2, r2, r3
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
 8002282:	e004      	b.n	800228e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	4a0c      	ldr	r2, [pc, #48]	; (80022b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002288:	fb02 f303 	mul.w	r3, r2, r3
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	623b      	str	r3, [r7, #32]
      break;
 8002292:	e002      	b.n	800229a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002294:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002296:	623b      	str	r3, [r7, #32]
      break;
 8002298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800229a:	6a3b      	ldr	r3, [r7, #32]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3728      	adds	r7, #40	; 0x28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc90      	pop	{r4, r7}
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	08003c84 	.word	0x08003c84
 80022ac:	08003c94 	.word	0x08003c94
 80022b0:	40021000 	.word	0x40021000
 80022b4:	007a1200 	.word	0x007a1200
 80022b8:	003d0900 	.word	0x003d0900

080022bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022c0:	4b02      	ldr	r3, [pc, #8]	; (80022cc <HAL_RCC_GetHCLKFreq+0x10>)
 80022c2:	681b      	ldr	r3, [r3, #0]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr
 80022cc:	20000008 	.word	0x20000008

080022d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022d4:	f7ff fff2 	bl	80022bc <HAL_RCC_GetHCLKFreq>
 80022d8:	4601      	mov	r1, r0
 80022da:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	4a03      	ldr	r2, [pc, #12]	; (80022f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022e6:	5cd3      	ldrb	r3, [r2, r3]
 80022e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40021000 	.word	0x40021000
 80022f4:	08003ca8 	.word	0x08003ca8

080022f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022fc:	f7ff ffde 	bl	80022bc <HAL_RCC_GetHCLKFreq>
 8002300:	4601      	mov	r1, r0
 8002302:	4b05      	ldr	r3, [pc, #20]	; (8002318 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	0adb      	lsrs	r3, r3, #11
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	4a03      	ldr	r2, [pc, #12]	; (800231c <HAL_RCC_GetPCLK2Freq+0x24>)
 800230e:	5cd3      	ldrb	r3, [r2, r3]
 8002310:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002314:	4618      	mov	r0, r3
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40021000 	.word	0x40021000
 800231c:	08003ca8 	.word	0x08003ca8

08002320 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002328:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <RCC_Delay+0x34>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a0a      	ldr	r2, [pc, #40]	; (8002358 <RCC_Delay+0x38>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	0a5b      	lsrs	r3, r3, #9
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	fb02 f303 	mul.w	r3, r2, r3
 800233a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800233c:	bf00      	nop
  }
  while (Delay --);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1e5a      	subs	r2, r3, #1
 8002342:	60fa      	str	r2, [r7, #12]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1f9      	bne.n	800233c <RCC_Delay+0x1c>
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000008 	.word	0x20000008
 8002358:	10624dd3 	.word	0x10624dd3

0800235c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e01d      	b.n	80023aa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d106      	bne.n	8002388 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f001 faf6 	bl	8003974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3304      	adds	r3, #4
 8002398:	4619      	mov	r1, r3
 800239a:	4610      	mov	r0, r2
 800239c:	f000 fa10 	bl	80027c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b085      	sub	sp, #20
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 0201 	orr.w	r2, r2, #1
 80023c8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2b06      	cmp	r3, #6
 80023da:	d007      	beq.n	80023ec <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b02      	cmp	r3, #2
 800240c:	d122      	bne.n	8002454 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b02      	cmp	r3, #2
 800241a:	d11b      	bne.n	8002454 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f06f 0202 	mvn.w	r2, #2
 8002424:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f9a4 	bl	8002788 <HAL_TIM_IC_CaptureCallback>
 8002440:	e005      	b.n	800244e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f997 	bl	8002776 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 f9a6 	bl	800279a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	2b04      	cmp	r3, #4
 8002460:	d122      	bne.n	80024a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b04      	cmp	r3, #4
 800246e:	d11b      	bne.n	80024a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f06f 0204 	mvn.w	r2, #4
 8002478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2202      	movs	r2, #2
 800247e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f97a 	bl	8002788 <HAL_TIM_IC_CaptureCallback>
 8002494:	e005      	b.n	80024a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f96d 	bl	8002776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 f97c 	bl	800279a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d122      	bne.n	80024fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f003 0308 	and.w	r3, r3, #8
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d11b      	bne.n	80024fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f06f 0208 	mvn.w	r2, #8
 80024cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2204      	movs	r2, #4
 80024d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f950 	bl	8002788 <HAL_TIM_IC_CaptureCallback>
 80024e8:	e005      	b.n	80024f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f943 	bl	8002776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f952 	bl	800279a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f003 0310 	and.w	r3, r3, #16
 8002506:	2b10      	cmp	r3, #16
 8002508:	d122      	bne.n	8002550 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f003 0310 	and.w	r3, r3, #16
 8002514:	2b10      	cmp	r3, #16
 8002516:	d11b      	bne.n	8002550 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f06f 0210 	mvn.w	r2, #16
 8002520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2208      	movs	r2, #8
 8002526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f926 	bl	8002788 <HAL_TIM_IC_CaptureCallback>
 800253c:	e005      	b.n	800254a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f919 	bl	8002776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f928 	bl	800279a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b01      	cmp	r3, #1
 800255c:	d10e      	bne.n	800257c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b01      	cmp	r3, #1
 800256a:	d107      	bne.n	800257c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 0201 	mvn.w	r2, #1
 8002574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f001 f8c4 	bl	8003704 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002586:	2b80      	cmp	r3, #128	; 0x80
 8002588:	d10e      	bne.n	80025a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002594:	2b80      	cmp	r3, #128	; 0x80
 8002596:	d107      	bne.n	80025a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 fa51 	bl	8002a4a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b2:	2b40      	cmp	r3, #64	; 0x40
 80025b4:	d10e      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c0:	2b40      	cmp	r3, #64	; 0x40
 80025c2:	d107      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f8ec 	bl	80027ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	f003 0320 	and.w	r3, r3, #32
 80025de:	2b20      	cmp	r3, #32
 80025e0:	d10e      	bne.n	8002600 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	2b20      	cmp	r3, #32
 80025ee:	d107      	bne.n	8002600 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f06f 0220 	mvn.w	r2, #32
 80025f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 fa1c 	bl	8002a38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002600:	bf00      	nop
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_TIM_ConfigClockSource+0x18>
 800261c:	2302      	movs	r3, #2
 800261e:	e0a6      	b.n	800276e <HAL_TIM_ConfigClockSource+0x166>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800263e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002646:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b40      	cmp	r3, #64	; 0x40
 8002656:	d067      	beq.n	8002728 <HAL_TIM_ConfigClockSource+0x120>
 8002658:	2b40      	cmp	r3, #64	; 0x40
 800265a:	d80b      	bhi.n	8002674 <HAL_TIM_ConfigClockSource+0x6c>
 800265c:	2b10      	cmp	r3, #16
 800265e:	d073      	beq.n	8002748 <HAL_TIM_ConfigClockSource+0x140>
 8002660:	2b10      	cmp	r3, #16
 8002662:	d802      	bhi.n	800266a <HAL_TIM_ConfigClockSource+0x62>
 8002664:	2b00      	cmp	r3, #0
 8002666:	d06f      	beq.n	8002748 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002668:	e078      	b.n	800275c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800266a:	2b20      	cmp	r3, #32
 800266c:	d06c      	beq.n	8002748 <HAL_TIM_ConfigClockSource+0x140>
 800266e:	2b30      	cmp	r3, #48	; 0x30
 8002670:	d06a      	beq.n	8002748 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002672:	e073      	b.n	800275c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002674:	2b70      	cmp	r3, #112	; 0x70
 8002676:	d00d      	beq.n	8002694 <HAL_TIM_ConfigClockSource+0x8c>
 8002678:	2b70      	cmp	r3, #112	; 0x70
 800267a:	d804      	bhi.n	8002686 <HAL_TIM_ConfigClockSource+0x7e>
 800267c:	2b50      	cmp	r3, #80	; 0x50
 800267e:	d033      	beq.n	80026e8 <HAL_TIM_ConfigClockSource+0xe0>
 8002680:	2b60      	cmp	r3, #96	; 0x60
 8002682:	d041      	beq.n	8002708 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002684:	e06a      	b.n	800275c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800268a:	d066      	beq.n	800275a <HAL_TIM_ConfigClockSource+0x152>
 800268c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002690:	d017      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002692:	e063      	b.n	800275c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	6899      	ldr	r1, [r3, #8]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f000 f965 	bl	8002972 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026b6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	609a      	str	r2, [r3, #8]
      break;
 80026c0:	e04c      	b.n	800275c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	6899      	ldr	r1, [r3, #8]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	f000 f94e 	bl	8002972 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026e4:	609a      	str	r2, [r3, #8]
      break;
 80026e6:	e039      	b.n	800275c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	6859      	ldr	r1, [r3, #4]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	461a      	mov	r2, r3
 80026f6:	f000 f8c5 	bl	8002884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2150      	movs	r1, #80	; 0x50
 8002700:	4618      	mov	r0, r3
 8002702:	f000 f91c 	bl	800293e <TIM_ITRx_SetConfig>
      break;
 8002706:	e029      	b.n	800275c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6818      	ldr	r0, [r3, #0]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	6859      	ldr	r1, [r3, #4]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	461a      	mov	r2, r3
 8002716:	f000 f8e3 	bl	80028e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2160      	movs	r1, #96	; 0x60
 8002720:	4618      	mov	r0, r3
 8002722:	f000 f90c 	bl	800293e <TIM_ITRx_SetConfig>
      break;
 8002726:	e019      	b.n	800275c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6818      	ldr	r0, [r3, #0]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	6859      	ldr	r1, [r3, #4]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	461a      	mov	r2, r3
 8002736:	f000 f8a5 	bl	8002884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2140      	movs	r1, #64	; 0x40
 8002740:	4618      	mov	r0, r3
 8002742:	f000 f8fc 	bl	800293e <TIM_ITRx_SetConfig>
      break;
 8002746:	e009      	b.n	800275c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4619      	mov	r1, r3
 8002752:	4610      	mov	r0, r2
 8002754:	f000 f8f3 	bl	800293e <TIM_ITRx_SetConfig>
      break;
 8002758:	e000      	b.n	800275c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800275a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr

0800279a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr
	...

080027c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a29      	ldr	r2, [pc, #164]	; (8002878 <TIM_Base_SetConfig+0xb8>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d00b      	beq.n	80027f0 <TIM_Base_SetConfig+0x30>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027de:	d007      	beq.n	80027f0 <TIM_Base_SetConfig+0x30>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a26      	ldr	r2, [pc, #152]	; (800287c <TIM_Base_SetConfig+0xbc>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d003      	beq.n	80027f0 <TIM_Base_SetConfig+0x30>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a25      	ldr	r2, [pc, #148]	; (8002880 <TIM_Base_SetConfig+0xc0>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d108      	bne.n	8002802 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	4313      	orrs	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a1c      	ldr	r2, [pc, #112]	; (8002878 <TIM_Base_SetConfig+0xb8>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d00b      	beq.n	8002822 <TIM_Base_SetConfig+0x62>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002810:	d007      	beq.n	8002822 <TIM_Base_SetConfig+0x62>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a19      	ldr	r2, [pc, #100]	; (800287c <TIM_Base_SetConfig+0xbc>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d003      	beq.n	8002822 <TIM_Base_SetConfig+0x62>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a18      	ldr	r2, [pc, #96]	; (8002880 <TIM_Base_SetConfig+0xc0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d108      	bne.n	8002834 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	4313      	orrs	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	4313      	orrs	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a07      	ldr	r2, [pc, #28]	; (8002878 <TIM_Base_SetConfig+0xb8>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d103      	bne.n	8002868 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	691a      	ldr	r2, [r3, #16]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	615a      	str	r2, [r3, #20]
}
 800286e:	bf00      	nop
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr
 8002878:	40012c00 	.word	0x40012c00
 800287c:	40000400 	.word	0x40000400
 8002880:	40000800 	.word	0x40000800

08002884 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002884:	b480      	push	{r7}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	f023 0201 	bic.w	r2, r3, #1
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f023 030a 	bic.w	r3, r3, #10
 80028c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	621a      	str	r2, [r3, #32]
}
 80028d6:	bf00      	nop
 80028d8:	371c      	adds	r7, #28
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	f023 0210 	bic.w	r2, r3, #16
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800290a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	031b      	lsls	r3, r3, #12
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	4313      	orrs	r3, r2
 8002914:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800291c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	621a      	str	r2, [r3, #32]
}
 8002934:	bf00      	nop
 8002936:	371c      	adds	r7, #28
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr

0800293e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800293e:	b480      	push	{r7}
 8002940:	b085      	sub	sp, #20
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002954:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4313      	orrs	r3, r2
 800295c:	f043 0307 	orr.w	r3, r3, #7
 8002960:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	609a      	str	r2, [r3, #8]
}
 8002968:	bf00      	nop
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr

08002972 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002972:	b480      	push	{r7}
 8002974:	b087      	sub	sp, #28
 8002976:	af00      	add	r7, sp, #0
 8002978:	60f8      	str	r0, [r7, #12]
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	607a      	str	r2, [r7, #4]
 800297e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800298c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	021a      	lsls	r2, r3, #8
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	431a      	orrs	r2, r3
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	4313      	orrs	r3, r2
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	4313      	orrs	r3, r2
 800299e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	609a      	str	r2, [r3, #8]
}
 80029a6:	bf00      	nop
 80029a8:	371c      	adds	r7, #28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr

080029b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029c4:	2302      	movs	r3, #2
 80029c6:	e032      	b.n	8002a2e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2202      	movs	r2, #2
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a00:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3714      	adds	r7, #20
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr

08002a4a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e03f      	b.n	8002aee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d106      	bne.n	8002a88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 ff9a 	bl	80039bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2224      	movs	r2, #36	; 0x24
 8002a8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fb6b 	bl	800317c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	691a      	ldr	r2, [r3, #16]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ab4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695a      	ldr	r2, [r3, #20]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ac4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68da      	ldr	r2, [r3, #12]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ad4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	4613      	mov	r3, r2
 8002b04:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b20      	cmp	r3, #32
 8002b10:	d153      	bne.n	8002bba <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d002      	beq.n	8002b1e <HAL_UART_Transmit_DMA+0x26>
 8002b18:	88fb      	ldrh	r3, [r7, #6]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e04c      	b.n	8002bbc <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d101      	bne.n	8002b30 <HAL_UART_Transmit_DMA+0x38>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e045      	b.n	8002bbc <HAL_UART_Transmit_DMA+0xc4>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	88fa      	ldrh	r2, [r7, #6]
 8002b42:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	88fa      	ldrh	r2, [r7, #6]
 8002b48:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2221      	movs	r2, #33	; 0x21
 8002b54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	4a19      	ldr	r2, [pc, #100]	; (8002bc4 <HAL_UART_Transmit_DMA+0xcc>)
 8002b5e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b64:	4a18      	ldr	r2, [pc, #96]	; (8002bc8 <HAL_UART_Transmit_DMA+0xd0>)
 8002b66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	4a17      	ldr	r2, [pc, #92]	; (8002bcc <HAL_UART_Transmit_DMA+0xd4>)
 8002b6e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b74:	2200      	movs	r2, #0
 8002b76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8002b78:	f107 0308 	add.w	r3, r7, #8
 8002b7c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	6819      	ldr	r1, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	88fb      	ldrh	r3, [r7, #6]
 8002b90:	f7fd fca6 	bl	80004e0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b9c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695a      	ldr	r2, [r3, #20]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bb4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e000      	b.n	8002bbc <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8002bba:	2302      	movs	r3, #2
  }
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	08002e11 	.word	0x08002e11
 8002bc8:	08002e63 	.word	0x08002e63
 8002bcc:	08002e7f 	.word	0x08002e7f

08002bd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10d      	bne.n	8002c22 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	f003 0320 	and.w	r3, r3, #32
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d008      	beq.n	8002c22 <HAL_UART_IRQHandler+0x52>
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	f003 0320 	and.w	r3, r3, #32
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 fa2c 	bl	8003078 <UART_Receive_IT>
      return;
 8002c20:	e0cc      	b.n	8002dbc <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 80ab 	beq.w	8002d80 <HAL_UART_IRQHandler+0x1b0>
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d105      	bne.n	8002c40 <HAL_UART_IRQHandler+0x70>
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 80a0 	beq.w	8002d80 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00a      	beq.n	8002c60 <HAL_UART_IRQHandler+0x90>
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d005      	beq.n	8002c60 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c58:	f043 0201 	orr.w	r2, r3, #1
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00a      	beq.n	8002c80 <HAL_UART_IRQHandler+0xb0>
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c78:	f043 0202 	orr.w	r2, r3, #2
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <HAL_UART_IRQHandler+0xd0>
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d005      	beq.n	8002ca0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c98:	f043 0204 	orr.w	r2, r3, #4
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <HAL_UART_IRQHandler+0xf0>
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb8:	f043 0208 	orr.w	r2, r3, #8
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d078      	beq.n	8002dba <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f003 0320 	and.w	r3, r3, #32
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d007      	beq.n	8002ce2 <HAL_UART_IRQHandler+0x112>
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	f003 0320 	and.w	r3, r3, #32
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d002      	beq.n	8002ce2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 f9cb 	bl	8003078 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	bf14      	ite	ne
 8002cf0:	2301      	movne	r3, #1
 8002cf2:	2300      	moveq	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d102      	bne.n	8002d0a <HAL_UART_IRQHandler+0x13a>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d031      	beq.n	8002d6e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f916 	bl	8002f3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d023      	beq.n	8002d66 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695a      	ldr	r2, [r3, #20]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d2c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d013      	beq.n	8002d5e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3a:	4a22      	ldr	r2, [pc, #136]	; (8002dc4 <HAL_UART_IRQHandler+0x1f4>)
 8002d3c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fd fc2c 	bl	80005a0 <HAL_DMA_Abort_IT>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d016      	beq.n	8002d7c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d58:	4610      	mov	r0, r2
 8002d5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d5c:	e00e      	b.n	8002d7c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f84d 	bl	8002dfe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d64:	e00a      	b.n	8002d7c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f849 	bl	8002dfe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d6c:	e006      	b.n	8002d7c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f845 	bl	8002dfe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002d7a:	e01e      	b.n	8002dba <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d7c:	bf00      	nop
    return;
 8002d7e:	e01c      	b.n	8002dba <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d008      	beq.n	8002d9c <HAL_UART_IRQHandler+0x1cc>
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f902 	bl	8002f9e <UART_Transmit_IT>
    return;
 8002d9a:	e00f      	b.n	8002dbc <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <HAL_UART_IRQHandler+0x1ec>
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f949 	bl	8003048 <UART_EndTransmit_IT>
    return;
 8002db6:	bf00      	nop
 8002db8:	e000      	b.n	8002dbc <HAL_UART_IRQHandler+0x1ec>
    return;
 8002dba:	bf00      	nop
  }
}
 8002dbc:	3720      	adds	r7, #32
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	08002f77 	.word	0x08002f77

08002dc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr

08002dda <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr

08002dfe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0320 	and.w	r3, r3, #32
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d113      	bne.n	8002e54 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	695a      	ldr	r2, [r3, #20]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e40:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e50:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002e52:	e002      	b.n	8002e5a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f7ff ffb7 	bl	8002dc8 <HAL_UART_TxCpltCallback>
}
 8002e5a:	bf00      	nop
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b084      	sub	sp, #16
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f7ff ffb2 	bl	8002dda <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b084      	sub	sp, #16
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	bf14      	ite	ne
 8002e9e:	2301      	movne	r3, #1
 8002ea0:	2300      	moveq	r3, #0
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b21      	cmp	r3, #33	; 0x21
 8002eb0:	d108      	bne.n	8002ec4 <UART_DMAError+0x46>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002ebe:	68b8      	ldr	r0, [r7, #8]
 8002ec0:	f000 f827 	bl	8002f12 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	bf14      	ite	ne
 8002ed2:	2301      	movne	r3, #1
 8002ed4:	2300      	moveq	r3, #0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b22      	cmp	r3, #34	; 0x22
 8002ee4:	d108      	bne.n	8002ef8 <UART_DMAError+0x7a>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002ef2:	68b8      	ldr	r0, [r7, #8]
 8002ef4:	f000 f822 	bl	8002f3c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efc:	f043 0210 	orr.w	r2, r3, #16
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f04:	68b8      	ldr	r0, [r7, #8]
 8002f06:	f7ff ff7a 	bl	8002dfe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f0a:	bf00      	nop
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002f28:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr

08002f3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f52:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0201 	bic.w	r2, r2, #1
 8002f62:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr

08002f76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b084      	sub	sp, #16
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f7ff ff34 	bl	8002dfe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f96:	bf00      	nop
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b085      	sub	sp, #20
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b21      	cmp	r3, #33	; 0x21
 8002fb0:	d144      	bne.n	800303c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fba:	d11a      	bne.n	8002ff2 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fd0:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d105      	bne.n	8002fe6 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	1c9a      	adds	r2, r3, #2
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	621a      	str	r2, [r3, #32]
 8002fe4:	e00e      	b.n	8003004 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	621a      	str	r2, [r3, #32]
 8002ff0:	e008      	b.n	8003004 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	1c59      	adds	r1, r3, #1
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6211      	str	r1, [r2, #32]
 8002ffc:	781a      	ldrb	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003008:	b29b      	uxth	r3, r3
 800300a:	3b01      	subs	r3, #1
 800300c:	b29b      	uxth	r3, r3
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	4619      	mov	r1, r3
 8003012:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10f      	bne.n	8003038 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003026:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003036:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	e000      	b.n	800303e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800303c:	2302      	movs	r3, #2
  }
}
 800303e:	4618      	mov	r0, r3
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr

08003048 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800305e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7ff fead 	bl	8002dc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b22      	cmp	r3, #34	; 0x22
 800308a:	d171      	bne.n	8003170 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003094:	d123      	bne.n	80030de <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10e      	bne.n	80030c2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ba:	1c9a      	adds	r2, r3, #2
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	629a      	str	r2, [r3, #40]	; 0x28
 80030c0:	e029      	b.n	8003116 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	629a      	str	r2, [r3, #40]	; 0x28
 80030dc:	e01b      	b.n	8003116 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10a      	bne.n	80030fc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6858      	ldr	r0, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f0:	1c59      	adds	r1, r3, #1
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6291      	str	r1, [r2, #40]	; 0x28
 80030f6:	b2c2      	uxtb	r2, r0
 80030f8:	701a      	strb	r2, [r3, #0]
 80030fa:	e00c      	b.n	8003116 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	b2da      	uxtb	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	1c58      	adds	r0, r3, #1
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	6288      	str	r0, [r1, #40]	; 0x28
 800310e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800311a:	b29b      	uxth	r3, r3
 800311c:	3b01      	subs	r3, #1
 800311e:	b29b      	uxth	r3, r3
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	4619      	mov	r1, r3
 8003124:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003126:	2b00      	cmp	r3, #0
 8003128:	d120      	bne.n	800316c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0220 	bic.w	r2, r2, #32
 8003138:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003148:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695a      	ldr	r2, [r3, #20]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0201 	bic.w	r2, r2, #1
 8003158:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff fe42 	bl	8002dec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003168:	2300      	movs	r3, #0
 800316a:	e002      	b.n	8003172 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	e000      	b.n	8003172 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003170:	2302      	movs	r3, #2
  }
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031b6:	f023 030c 	bic.w	r3, r3, #12
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6812      	ldr	r2, [r2, #0]
 80031be:	68f9      	ldr	r1, [r7, #12]
 80031c0:	430b      	orrs	r3, r1
 80031c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a52      	ldr	r2, [pc, #328]	; (8003328 <UART_SetConfig+0x1ac>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d14e      	bne.n	8003282 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031e4:	f7ff f888 	bl	80022f8 <HAL_RCC_GetPCLK2Freq>
 80031e8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	009a      	lsls	r2, r3, #2
 80031f4:	441a      	add	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003200:	4a4a      	ldr	r2, [pc, #296]	; (800332c <UART_SetConfig+0x1b0>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	0119      	lsls	r1, r3, #4
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	009a      	lsls	r2, r3, #2
 8003214:	441a      	add	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003220:	4b42      	ldr	r3, [pc, #264]	; (800332c <UART_SetConfig+0x1b0>)
 8003222:	fba3 0302 	umull	r0, r3, r3, r2
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	2064      	movs	r0, #100	; 0x64
 800322a:	fb00 f303 	mul.w	r3, r0, r3
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	3332      	adds	r3, #50	; 0x32
 8003234:	4a3d      	ldr	r2, [pc, #244]	; (800332c <UART_SetConfig+0x1b0>)
 8003236:	fba2 2303 	umull	r2, r3, r2, r3
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003240:	4419      	add	r1, r3
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	009a      	lsls	r2, r3, #2
 800324c:	441a      	add	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	fbb2 f2f3 	udiv	r2, r2, r3
 8003258:	4b34      	ldr	r3, [pc, #208]	; (800332c <UART_SetConfig+0x1b0>)
 800325a:	fba3 0302 	umull	r0, r3, r3, r2
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	2064      	movs	r0, #100	; 0x64
 8003262:	fb00 f303 	mul.w	r3, r0, r3
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	3332      	adds	r3, #50	; 0x32
 800326c:	4a2f      	ldr	r2, [pc, #188]	; (800332c <UART_SetConfig+0x1b0>)
 800326e:	fba2 2303 	umull	r2, r3, r2, r3
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	f003 020f 	and.w	r2, r3, #15
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	440a      	add	r2, r1
 800327e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003280:	e04d      	b.n	800331e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003282:	f7ff f825 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003286:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	009a      	lsls	r2, r3, #2
 8003292:	441a      	add	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	fbb2 f3f3 	udiv	r3, r2, r3
 800329e:	4a23      	ldr	r2, [pc, #140]	; (800332c <UART_SetConfig+0x1b0>)
 80032a0:	fba2 2303 	umull	r2, r3, r2, r3
 80032a4:	095b      	lsrs	r3, r3, #5
 80032a6:	0119      	lsls	r1, r3, #4
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	009a      	lsls	r2, r3, #2
 80032b2:	441a      	add	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80032be:	4b1b      	ldr	r3, [pc, #108]	; (800332c <UART_SetConfig+0x1b0>)
 80032c0:	fba3 0302 	umull	r0, r3, r3, r2
 80032c4:	095b      	lsrs	r3, r3, #5
 80032c6:	2064      	movs	r0, #100	; 0x64
 80032c8:	fb00 f303 	mul.w	r3, r0, r3
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	3332      	adds	r3, #50	; 0x32
 80032d2:	4a16      	ldr	r2, [pc, #88]	; (800332c <UART_SetConfig+0x1b0>)
 80032d4:	fba2 2303 	umull	r2, r3, r2, r3
 80032d8:	095b      	lsrs	r3, r3, #5
 80032da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032de:	4419      	add	r1, r3
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	009a      	lsls	r2, r3, #2
 80032ea:	441a      	add	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80032f6:	4b0d      	ldr	r3, [pc, #52]	; (800332c <UART_SetConfig+0x1b0>)
 80032f8:	fba3 0302 	umull	r0, r3, r3, r2
 80032fc:	095b      	lsrs	r3, r3, #5
 80032fe:	2064      	movs	r0, #100	; 0x64
 8003300:	fb00 f303 	mul.w	r3, r0, r3
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	3332      	adds	r3, #50	; 0x32
 800330a:	4a08      	ldr	r2, [pc, #32]	; (800332c <UART_SetConfig+0x1b0>)
 800330c:	fba2 2303 	umull	r2, r3, r2, r3
 8003310:	095b      	lsrs	r3, r3, #5
 8003312:	f003 020f 	and.w	r2, r3, #15
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	440a      	add	r2, r1
 800331c:	609a      	str	r2, [r3, #8]
}
 800331e:	bf00      	nop
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40013800 	.word	0x40013800
 800332c:	51eb851f 	.word	0x51eb851f

08003330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003336:	f7fc ff09 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800333a:	f000 f841 	bl	80033c0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  for(int i = 0; i < 21; i++){
 800333e:	2300      	movs	r3, #0
 8003340:	607b      	str	r3, [r7, #4]
 8003342:	e007      	b.n	8003354 <main+0x24>
	  informacoesPainel[i] = 0;
 8003344:	4a1b      	ldr	r2, [pc, #108]	; (80033b4 <main+0x84>)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4413      	add	r3, r2
 800334a:	2200      	movs	r2, #0
 800334c:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 21; i++){
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3301      	adds	r3, #1
 8003352:	607b      	str	r3, [r7, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b14      	cmp	r3, #20
 8003358:	ddf4      	ble.n	8003344 <main+0x14>
  }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800335a:	f000 f933 	bl	80035c4 <MX_GPIO_Init>
  MX_DMA_Init();
 800335e:	f000 f913 	bl	8003588 <MX_DMA_Init>
  MX_TIM2_Init();
 8003362:	f000 f89b 	bl	800349c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8003366:	f000 f8e5 	bl	8003534 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 800336a:	f000 f869 	bl	8003440 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800336e:	4812      	ldr	r0, [pc, #72]	; (80033b8 <main+0x88>)
 8003370:	f7ff f81f 	bl	80023b2 <HAL_TIM_Base_Start_IT>

  uint8_t Data = 0;
 8003374:	2300      	movs	r3, #0
 8003376:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Mem_Write(&hi2c2, (MPU6050_ADDR<<1), 0x6B, 1,&Data, 1, 1000);
 8003378:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800337c:	9302      	str	r3, [sp, #8]
 800337e:	2301      	movs	r3, #1
 8003380:	9301      	str	r3, [sp, #4]
 8003382:	1cfb      	adds	r3, r7, #3
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	2301      	movs	r3, #1
 8003388:	226b      	movs	r2, #107	; 0x6b
 800338a:	21d0      	movs	r1, #208	; 0xd0
 800338c:	480b      	ldr	r0, [pc, #44]	; (80033bc <main+0x8c>)
 800338e:	f7fd fd63 	bl	8000e58 <HAL_I2C_Mem_Write>
  Data = 0x07;
 8003392:	2307      	movs	r3, #7
 8003394:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Mem_Write(&hi2c2, (MPU6050_ADDR<<1), 0x19, 1, &Data, 1, 1000);
 8003396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800339a:	9302      	str	r3, [sp, #8]
 800339c:	2301      	movs	r3, #1
 800339e:	9301      	str	r3, [sp, #4]
 80033a0:	1cfb      	adds	r3, r7, #3
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	2301      	movs	r3, #1
 80033a6:	2219      	movs	r2, #25
 80033a8:	21d0      	movs	r1, #208	; 0xd0
 80033aa:	4804      	ldr	r0, [pc, #16]	; (80033bc <main+0x8c>)
 80033ac:	f7fd fd54 	bl	8000e58 <HAL_I2C_Mem_Write>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80033b0:	e7fe      	b.n	80033b0 <main+0x80>
 80033b2:	bf00      	nop
 80033b4:	20000154 	.word	0x20000154
 80033b8:	200000d4 	.word	0x200000d4
 80033bc:	20000030 	.word	0x20000030

080033c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b090      	sub	sp, #64	; 0x40
 80033c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033c6:	f107 0318 	add.w	r3, r7, #24
 80033ca:	2228      	movs	r2, #40	; 0x28
 80033cc:	2100      	movs	r1, #0
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 fc44 	bl	8003c5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033d4:	1d3b      	adds	r3, r7, #4
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	605a      	str	r2, [r3, #4]
 80033dc:	609a      	str	r2, [r3, #8]
 80033de:	60da      	str	r2, [r3, #12]
 80033e0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80033e2:	2302      	movs	r3, #2
 80033e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033e6:	2301      	movs	r3, #1
 80033e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80033ea:	2310      	movs	r3, #16
 80033ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033ee:	2302      	movs	r3, #2
 80033f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80033f2:	2300      	movs	r3, #0
 80033f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80033f6:	2300      	movs	r3, #0
 80033f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033fa:	f107 0318 	add.w	r3, r7, #24
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fe fb90 	bl	8001b24 <HAL_RCC_OscConfig>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800340a:	f000 fa3b 	bl	8003884 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800340e:	230f      	movs	r3, #15
 8003410:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003412:	2302      	movs	r3, #2
 8003414:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800341a:	2300      	movs	r3, #0
 800341c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003422:	1d3b      	adds	r3, r7, #4
 8003424:	2100      	movs	r1, #0
 8003426:	4618      	mov	r0, r3
 8003428:	f7fe fdfc 	bl	8002024 <HAL_RCC_ClockConfig>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8003432:	f000 fa27 	bl	8003884 <Error_Handler>
  }
}
 8003436:	bf00      	nop
 8003438:	3740      	adds	r7, #64	; 0x40
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003444:	4b12      	ldr	r3, [pc, #72]	; (8003490 <MX_I2C2_Init+0x50>)
 8003446:	4a13      	ldr	r2, [pc, #76]	; (8003494 <MX_I2C2_Init+0x54>)
 8003448:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800344a:	4b11      	ldr	r3, [pc, #68]	; (8003490 <MX_I2C2_Init+0x50>)
 800344c:	4a12      	ldr	r2, [pc, #72]	; (8003498 <MX_I2C2_Init+0x58>)
 800344e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003450:	4b0f      	ldr	r3, [pc, #60]	; (8003490 <MX_I2C2_Init+0x50>)
 8003452:	2200      	movs	r2, #0
 8003454:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003456:	4b0e      	ldr	r3, [pc, #56]	; (8003490 <MX_I2C2_Init+0x50>)
 8003458:	2200      	movs	r2, #0
 800345a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800345c:	4b0c      	ldr	r3, [pc, #48]	; (8003490 <MX_I2C2_Init+0x50>)
 800345e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003462:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003464:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <MX_I2C2_Init+0x50>)
 8003466:	2200      	movs	r2, #0
 8003468:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800346a:	4b09      	ldr	r3, [pc, #36]	; (8003490 <MX_I2C2_Init+0x50>)
 800346c:	2200      	movs	r2, #0
 800346e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003470:	4b07      	ldr	r3, [pc, #28]	; (8003490 <MX_I2C2_Init+0x50>)
 8003472:	2200      	movs	r2, #0
 8003474:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003476:	4b06      	ldr	r3, [pc, #24]	; (8003490 <MX_I2C2_Init+0x50>)
 8003478:	2200      	movs	r2, #0
 800347a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800347c:	4804      	ldr	r0, [pc, #16]	; (8003490 <MX_I2C2_Init+0x50>)
 800347e:	f7fd fbc3 	bl	8000c08 <HAL_I2C_Init>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003488:	f000 f9fc 	bl	8003884 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800348c:	bf00      	nop
 800348e:	bd80      	pop	{r7, pc}
 8003490:	20000030 	.word	0x20000030
 8003494:	40005800 	.word	0x40005800
 8003498:	000186a0 	.word	0x000186a0

0800349c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034a2:	f107 0308 	add.w	r3, r7, #8
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	605a      	str	r2, [r3, #4]
 80034ac:	609a      	str	r2, [r3, #8]
 80034ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034b0:	463b      	mov	r3, r7
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80034b8:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <MX_TIM2_Init+0x94>)
 80034ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80034c0:	4b1b      	ldr	r3, [pc, #108]	; (8003530 <MX_TIM2_Init+0x94>)
 80034c2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80034c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034c8:	4b19      	ldr	r3, [pc, #100]	; (8003530 <MX_TIM2_Init+0x94>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250;
 80034ce:	4b18      	ldr	r3, [pc, #96]	; (8003530 <MX_TIM2_Init+0x94>)
 80034d0:	22fa      	movs	r2, #250	; 0xfa
 80034d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034d4:	4b16      	ldr	r3, [pc, #88]	; (8003530 <MX_TIM2_Init+0x94>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034da:	4b15      	ldr	r3, [pc, #84]	; (8003530 <MX_TIM2_Init+0x94>)
 80034dc:	2200      	movs	r2, #0
 80034de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80034e0:	4813      	ldr	r0, [pc, #76]	; (8003530 <MX_TIM2_Init+0x94>)
 80034e2:	f7fe ff3b 	bl	800235c <HAL_TIM_Base_Init>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80034ec:	f000 f9ca 	bl	8003884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80034f6:	f107 0308 	add.w	r3, r7, #8
 80034fa:	4619      	mov	r1, r3
 80034fc:	480c      	ldr	r0, [pc, #48]	; (8003530 <MX_TIM2_Init+0x94>)
 80034fe:	f7ff f883 	bl	8002608 <HAL_TIM_ConfigClockSource>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003508:	f000 f9bc 	bl	8003884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800350c:	2300      	movs	r3, #0
 800350e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003510:	2300      	movs	r3, #0
 8003512:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003514:	463b      	mov	r3, r7
 8003516:	4619      	mov	r1, r3
 8003518:	4805      	ldr	r0, [pc, #20]	; (8003530 <MX_TIM2_Init+0x94>)
 800351a:	f7ff fa49 	bl	80029b0 <HAL_TIMEx_MasterConfigSynchronization>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003524:	f000 f9ae 	bl	8003884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003528:	bf00      	nop
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	200000d4 	.word	0x200000d4

08003534 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003538:	4b11      	ldr	r3, [pc, #68]	; (8003580 <MX_USART2_UART_Init+0x4c>)
 800353a:	4a12      	ldr	r2, [pc, #72]	; (8003584 <MX_USART2_UART_Init+0x50>)
 800353c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800353e:	4b10      	ldr	r3, [pc, #64]	; (8003580 <MX_USART2_UART_Init+0x4c>)
 8003540:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003544:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003546:	4b0e      	ldr	r3, [pc, #56]	; (8003580 <MX_USART2_UART_Init+0x4c>)
 8003548:	2200      	movs	r2, #0
 800354a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800354c:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <MX_USART2_UART_Init+0x4c>)
 800354e:	2200      	movs	r2, #0
 8003550:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003552:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <MX_USART2_UART_Init+0x4c>)
 8003554:	2200      	movs	r2, #0
 8003556:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003558:	4b09      	ldr	r3, [pc, #36]	; (8003580 <MX_USART2_UART_Init+0x4c>)
 800355a:	220c      	movs	r2, #12
 800355c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800355e:	4b08      	ldr	r3, [pc, #32]	; (8003580 <MX_USART2_UART_Init+0x4c>)
 8003560:	2200      	movs	r2, #0
 8003562:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003564:	4b06      	ldr	r3, [pc, #24]	; (8003580 <MX_USART2_UART_Init+0x4c>)
 8003566:	2200      	movs	r2, #0
 8003568:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800356a:	4805      	ldr	r0, [pc, #20]	; (8003580 <MX_USART2_UART_Init+0x4c>)
 800356c:	f7ff fa76 	bl	8002a5c <HAL_UART_Init>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003576:	f000 f985 	bl	8003884 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800357a:	bf00      	nop
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	20000114 	.word	0x20000114
 8003584:	40004400 	.word	0x40004400

08003588 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800358e:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <MX_DMA_Init+0x38>)
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	4a0b      	ldr	r2, [pc, #44]	; (80035c0 <MX_DMA_Init+0x38>)
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	6153      	str	r3, [r2, #20]
 800359a:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <MX_DMA_Init+0x38>)
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	607b      	str	r3, [r7, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80035a6:	2200      	movs	r2, #0
 80035a8:	2100      	movs	r1, #0
 80035aa:	2011      	movs	r0, #17
 80035ac:	f7fc ff07 	bl	80003be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80035b0:	2011      	movs	r0, #17
 80035b2:	f7fc ff20 	bl	80003f6 <HAL_NVIC_EnableIRQ>

}
 80035b6:	bf00      	nop
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40021000 	.word	0x40021000

080035c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b088      	sub	sp, #32
 80035c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ca:	f107 0310 	add.w	r3, r7, #16
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	605a      	str	r2, [r3, #4]
 80035d4:	609a      	str	r2, [r3, #8]
 80035d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035d8:	4b35      	ldr	r3, [pc, #212]	; (80036b0 <MX_GPIO_Init+0xec>)
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	4a34      	ldr	r2, [pc, #208]	; (80036b0 <MX_GPIO_Init+0xec>)
 80035de:	f043 0310 	orr.w	r3, r3, #16
 80035e2:	6193      	str	r3, [r2, #24]
 80035e4:	4b32      	ldr	r3, [pc, #200]	; (80036b0 <MX_GPIO_Init+0xec>)
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	f003 0310 	and.w	r3, r3, #16
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035f0:	4b2f      	ldr	r3, [pc, #188]	; (80036b0 <MX_GPIO_Init+0xec>)
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	4a2e      	ldr	r2, [pc, #184]	; (80036b0 <MX_GPIO_Init+0xec>)
 80035f6:	f043 0304 	orr.w	r3, r3, #4
 80035fa:	6193      	str	r3, [r2, #24]
 80035fc:	4b2c      	ldr	r3, [pc, #176]	; (80036b0 <MX_GPIO_Init+0xec>)
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003608:	4b29      	ldr	r3, [pc, #164]	; (80036b0 <MX_GPIO_Init+0xec>)
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	4a28      	ldr	r2, [pc, #160]	; (80036b0 <MX_GPIO_Init+0xec>)
 800360e:	f043 0308 	orr.w	r3, r3, #8
 8003612:	6193      	str	r3, [r2, #24]
 8003614:	4b26      	ldr	r3, [pc, #152]	; (80036b0 <MX_GPIO_Init+0xec>)
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	f003 0308 	and.w	r3, r3, #8
 800361c:	607b      	str	r3, [r7, #4]
 800361e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003620:	2200      	movs	r2, #0
 8003622:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003626:	4823      	ldr	r0, [pc, #140]	; (80036b4 <MX_GPIO_Init+0xf0>)
 8003628:	f7fd fabe 	bl	8000ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800362c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003630:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003632:	2301      	movs	r3, #1
 8003634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003636:	2302      	movs	r3, #2
 8003638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800363a:	2302      	movs	r3, #2
 800363c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800363e:	f107 0310 	add.w	r3, r7, #16
 8003642:	4619      	mov	r1, r3
 8003644:	481b      	ldr	r0, [pc, #108]	; (80036b4 <MX_GPIO_Init+0xf0>)
 8003646:	f7fd f955 	bl	80008f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Marcha_Posicao1_Pin */
  GPIO_InitStruct.Pin = Marcha_Posicao1_Pin;
 800364a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800364e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003650:	2300      	movs	r3, #0
 8003652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003654:	2302      	movs	r3, #2
 8003656:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Marcha_Posicao1_GPIO_Port, &GPIO_InitStruct);
 8003658:	f107 0310 	add.w	r3, r7, #16
 800365c:	4619      	mov	r1, r3
 800365e:	4815      	ldr	r0, [pc, #84]	; (80036b4 <MX_GPIO_Init+0xf0>)
 8003660:	f7fd f948 	bl	80008f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Marcha_Posicao2_Pin Combustivel_Pin Barra_Estab_Pin */
  GPIO_InitStruct.Pin = Marcha_Posicao2_Pin|Combustivel_Pin|Barra_Estab_Pin;
 8003664:	f240 4303 	movw	r3, #1027	; 0x403
 8003668:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800366e:	2302      	movs	r3, #2
 8003670:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003672:	f107 0310 	add.w	r3, r7, #16
 8003676:	4619      	mov	r1, r3
 8003678:	480f      	ldr	r0, [pc, #60]	; (80036b8 <MX_GPIO_Init+0xf4>)
 800367a:	f7fd f93b 	bl	80008f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Velocidade_Pin Rotacao_Pin */
  GPIO_InitStruct.Pin = Velocidade_Pin|Rotacao_Pin;
 800367e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003682:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003684:	4b0d      	ldr	r3, [pc, #52]	; (80036bc <MX_GPIO_Init+0xf8>)
 8003686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003688:	2301      	movs	r3, #1
 800368a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800368c:	f107 0310 	add.w	r3, r7, #16
 8003690:	4619      	mov	r1, r3
 8003692:	4809      	ldr	r0, [pc, #36]	; (80036b8 <MX_GPIO_Init+0xf4>)
 8003694:	f7fd f92e 	bl	80008f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003698:	2200      	movs	r2, #0
 800369a:	2100      	movs	r1, #0
 800369c:	2017      	movs	r0, #23
 800369e:	f7fc fe8e 	bl	80003be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80036a2:	2017      	movs	r0, #23
 80036a4:	f7fc fea7 	bl	80003f6 <HAL_NVIC_EnableIRQ>

}
 80036a8:	bf00      	nop
 80036aa:	3720      	adds	r7, #32
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40021000 	.word	0x40021000
 80036b4:	40011000 	.word	0x40011000
 80036b8:	40010800 	.word	0x40010800
 80036bc:	10110000 	.word	0x10110000

080036c0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	4603      	mov	r3, r0
 80036c8:	80fb      	strh	r3, [r7, #6]
 if (GPIO_Pin == GPIO_PIN_8) {
 80036ca:	88fb      	ldrh	r3, [r7, #6]
 80036cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036d0:	d105      	bne.n	80036de <HAL_GPIO_EXTI_Callback+0x1e>
	 pulsosVelocidade++;
 80036d2:	4b0a      	ldr	r3, [pc, #40]	; (80036fc <HAL_GPIO_EXTI_Callback+0x3c>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	3301      	adds	r3, #1
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	4b08      	ldr	r3, [pc, #32]	; (80036fc <HAL_GPIO_EXTI_Callback+0x3c>)
 80036dc:	701a      	strb	r2, [r3, #0]
 }

 if (GPIO_Pin == GPIO_PIN_9) {
 80036de:	88fb      	ldrh	r3, [r7, #6]
 80036e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036e4:	d105      	bne.n	80036f2 <HAL_GPIO_EXTI_Callback+0x32>
	 pulsosRotacao++;
 80036e6:	4b06      	ldr	r3, [pc, #24]	; (8003700 <HAL_GPIO_EXTI_Callback+0x40>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	3301      	adds	r3, #1
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	4b04      	ldr	r3, [pc, #16]	; (8003700 <HAL_GPIO_EXTI_Callback+0x40>)
 80036f0:	701a      	strb	r2, [r3, #0]
 }
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr
 80036fc:	20000029 	.word	0x20000029
 8003700:	20000028 	.word	0x20000028

08003704 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
	//verificaRotacao();
	//verificaVelocidade();
	//verificaCombustivel();
	//verificaMarchaEngatada();
	//informacoesPainel[4] = HAL_GPIO_ReadPin(Barra_Estab_GPIO_Port, GPIO_PIN_10);
	temperaturaAmbiente();
 800370c:	f000 f814 	bl	8003738 <temperaturaAmbiente>
	temperaturaObjeto();
 8003710:	f000 f826 	bl	8003760 <temperaturaObjeto>
	leituraGiroscopio();
 8003714:	f000 f852 	bl	80037bc <leituraGiroscopio>
	leituraAcelerometro();
 8003718:	f000 f870 	bl	80037fc <leituraAcelerometro>
	HAL_UART_Transmit_DMA(&huart2, informacoesPainel, PAINEL_BUFFSIZE);
 800371c:	2215      	movs	r2, #21
 800371e:	4904      	ldr	r1, [pc, #16]	; (8003730 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003720:	4804      	ldr	r0, [pc, #16]	; (8003734 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003722:	f7ff f9e9 	bl	8002af8 <HAL_UART_Transmit_DMA>
}
 8003726:	bf00      	nop
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20000154 	.word	0x20000154
 8003734:	20000114 	.word	0x20000114

08003738 <temperaturaAmbiente>:
			}
		}
	}
}

void temperaturaAmbiente(){
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
	leTemperatura(MLX90614_TA);
 800373c:	2006      	movs	r0, #6
 800373e:	f000 f823 	bl	8003788 <leTemperatura>
	informacoesPainel[5] = bufTemp[0];
 8003742:	4b05      	ldr	r3, [pc, #20]	; (8003758 <temperaturaAmbiente+0x20>)
 8003744:	781a      	ldrb	r2, [r3, #0]
 8003746:	4b05      	ldr	r3, [pc, #20]	; (800375c <temperaturaAmbiente+0x24>)
 8003748:	715a      	strb	r2, [r3, #5]
	informacoesPainel[6] = bufTemp[1];
 800374a:	4b03      	ldr	r3, [pc, #12]	; (8003758 <temperaturaAmbiente+0x20>)
 800374c:	785a      	ldrb	r2, [r3, #1]
 800374e:	4b03      	ldr	r3, [pc, #12]	; (800375c <temperaturaAmbiente+0x24>)
 8003750:	719a      	strb	r2, [r3, #6]
}
 8003752:	bf00      	nop
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	200000d0 	.word	0x200000d0
 800375c:	20000154 	.word	0x20000154

08003760 <temperaturaObjeto>:

void temperaturaObjeto(){
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
	leTemperatura(MLX90614_TOBJ);
 8003764:	2007      	movs	r0, #7
 8003766:	f000 f80f 	bl	8003788 <leTemperatura>
	informacoesPainel[7] = bufTemp[0];
 800376a:	4b05      	ldr	r3, [pc, #20]	; (8003780 <temperaturaObjeto+0x20>)
 800376c:	781a      	ldrb	r2, [r3, #0]
 800376e:	4b05      	ldr	r3, [pc, #20]	; (8003784 <temperaturaObjeto+0x24>)
 8003770:	71da      	strb	r2, [r3, #7]
	informacoesPainel[8] = bufTemp[1];
 8003772:	4b03      	ldr	r3, [pc, #12]	; (8003780 <temperaturaObjeto+0x20>)
 8003774:	785a      	ldrb	r2, [r3, #1]
 8003776:	4b03      	ldr	r3, [pc, #12]	; (8003784 <temperaturaObjeto+0x24>)
 8003778:	721a      	strb	r2, [r3, #8]
}
 800377a:	bf00      	nop
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	200000d0 	.word	0x200000d0
 8003784:	20000154 	.word	0x20000154

08003788 <leTemperatura>:

void leTemperatura(uint8_t reg){
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af04      	add	r7, sp, #16
 800378e:	4603      	mov	r3, r0
 8003790:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c2, (MLX90614_ADDR<<1), reg, 1, bufTemp, 3, 100);
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	b29a      	uxth	r2, r3
 8003796:	2364      	movs	r3, #100	; 0x64
 8003798:	9302      	str	r3, [sp, #8]
 800379a:	2303      	movs	r3, #3
 800379c:	9301      	str	r3, [sp, #4]
 800379e:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <leTemperatura+0x2c>)
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	2301      	movs	r3, #1
 80037a4:	21b4      	movs	r1, #180	; 0xb4
 80037a6:	4804      	ldr	r0, [pc, #16]	; (80037b8 <leTemperatura+0x30>)
 80037a8:	f7fd fc50 	bl	800104c <HAL_I2C_Mem_Read>

}
 80037ac:	bf00      	nop
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	200000d0 	.word	0x200000d0
 80037b8:	20000030 	.word	0x20000030

080037bc <leituraGiroscopio>:

void leituraGiroscopio(){
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
	leituraRegMPU(MPU6050_GIROSCOPIO);
 80037c2:	2043      	movs	r0, #67	; 0x43
 80037c4:	f000 f83a 	bl	800383c <leituraRegMPU>
	for(int i = 0; i < 6; i++){
 80037c8:	2300      	movs	r3, #0
 80037ca:	607b      	str	r3, [r7, #4]
 80037cc:	e00a      	b.n	80037e4 <leituraGiroscopio+0x28>
		informacoesPainel[9+i] = bufMPU[i];
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3309      	adds	r3, #9
 80037d2:	4908      	ldr	r1, [pc, #32]	; (80037f4 <leituraGiroscopio+0x38>)
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	440a      	add	r2, r1
 80037d8:	7811      	ldrb	r1, [r2, #0]
 80037da:	4a07      	ldr	r2, [pc, #28]	; (80037f8 <leituraGiroscopio+0x3c>)
 80037dc:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < 6; i++){
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3301      	adds	r3, #1
 80037e2:	607b      	str	r3, [r7, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b05      	cmp	r3, #5
 80037e8:	ddf1      	ble.n	80037ce <leituraGiroscopio+0x12>
	}
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20000084 	.word	0x20000084
 80037f8:	20000154 	.word	0x20000154

080037fc <leituraAcelerometro>:

void leituraAcelerometro(){
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
	leituraRegMPU(MPU6050_ACELEROMETRO);
 8003802:	203b      	movs	r0, #59	; 0x3b
 8003804:	f000 f81a 	bl	800383c <leituraRegMPU>
	for(int i = 0; i < 6; i++){
 8003808:	2300      	movs	r3, #0
 800380a:	607b      	str	r3, [r7, #4]
 800380c:	e00a      	b.n	8003824 <leituraAcelerometro+0x28>
		informacoesPainel[15+i] = bufMPU[i];
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	330f      	adds	r3, #15
 8003812:	4908      	ldr	r1, [pc, #32]	; (8003834 <leituraAcelerometro+0x38>)
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	440a      	add	r2, r1
 8003818:	7811      	ldrb	r1, [r2, #0]
 800381a:	4a07      	ldr	r2, [pc, #28]	; (8003838 <leituraAcelerometro+0x3c>)
 800381c:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < 6; i++){
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3301      	adds	r3, #1
 8003822:	607b      	str	r3, [r7, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b05      	cmp	r3, #5
 8003828:	ddf1      	ble.n	800380e <leituraAcelerometro+0x12>
	}
}
 800382a:	bf00      	nop
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000084 	.word	0x20000084
 8003838:	20000154 	.word	0x20000154

0800383c <leituraRegMPU>:

void leituraRegMPU(uint8_t reg){
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af04      	add	r7, sp, #16
 8003842:	4603      	mov	r3, r0
 8003844:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(&hi2c2, (MPU6050_ADDR<<1), reg, 1, bufMPU, 6, 100);
 8003846:	79fb      	ldrb	r3, [r7, #7]
 8003848:	b29a      	uxth	r2, r3
 800384a:	2364      	movs	r3, #100	; 0x64
 800384c:	9302      	str	r3, [sp, #8]
 800384e:	2306      	movs	r3, #6
 8003850:	9301      	str	r3, [sp, #4]
 8003852:	4b09      	ldr	r3, [pc, #36]	; (8003878 <leituraRegMPU+0x3c>)
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	2301      	movs	r3, #1
 8003858:	21d0      	movs	r1, #208	; 0xd0
 800385a:	4808      	ldr	r0, [pc, #32]	; (800387c <leituraRegMPU+0x40>)
 800385c:	f7fd fbf6 	bl	800104c <HAL_I2C_Mem_Read>
 8003860:	4603      	mov	r3, r0
 8003862:	73fb      	strb	r3, [r7, #15]
	if ( ret != HAL_OK ) {
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <leituraRegMPU+0x34>
		informacoesPainel[0] = 1;
 800386a:	4b05      	ldr	r3, [pc, #20]	; (8003880 <leituraRegMPU+0x44>)
 800386c:	2201      	movs	r2, #1
 800386e:	701a      	strb	r2, [r3, #0]
	}
}
 8003870:	bf00      	nop
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	20000084 	.word	0x20000084
 800387c:	20000030 	.word	0x20000030
 8003880:	20000154 	.word	0x20000154

08003884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003888:	bf00      	nop
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr

08003890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003896:	4b15      	ldr	r3, [pc, #84]	; (80038ec <HAL_MspInit+0x5c>)
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	4a14      	ldr	r2, [pc, #80]	; (80038ec <HAL_MspInit+0x5c>)
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	6193      	str	r3, [r2, #24]
 80038a2:	4b12      	ldr	r3, [pc, #72]	; (80038ec <HAL_MspInit+0x5c>)
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	60bb      	str	r3, [r7, #8]
 80038ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038ae:	4b0f      	ldr	r3, [pc, #60]	; (80038ec <HAL_MspInit+0x5c>)
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	4a0e      	ldr	r2, [pc, #56]	; (80038ec <HAL_MspInit+0x5c>)
 80038b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b8:	61d3      	str	r3, [r2, #28]
 80038ba:	4b0c      	ldr	r3, [pc, #48]	; (80038ec <HAL_MspInit+0x5c>)
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c2:	607b      	str	r3, [r7, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80038c6:	4b0a      	ldr	r3, [pc, #40]	; (80038f0 <HAL_MspInit+0x60>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	4a04      	ldr	r2, [pc, #16]	; (80038f0 <HAL_MspInit+0x60>)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038e2:	bf00      	nop
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr
 80038ec:	40021000 	.word	0x40021000
 80038f0:	40010000 	.word	0x40010000

080038f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038fc:	f107 0310 	add.w	r3, r7, #16
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	605a      	str	r2, [r3, #4]
 8003906:	609a      	str	r2, [r3, #8]
 8003908:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a16      	ldr	r2, [pc, #88]	; (8003968 <HAL_I2C_MspInit+0x74>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d124      	bne.n	800395e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003914:	4b15      	ldr	r3, [pc, #84]	; (800396c <HAL_I2C_MspInit+0x78>)
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	4a14      	ldr	r2, [pc, #80]	; (800396c <HAL_I2C_MspInit+0x78>)
 800391a:	f043 0308 	orr.w	r3, r3, #8
 800391e:	6193      	str	r3, [r2, #24]
 8003920:	4b12      	ldr	r3, [pc, #72]	; (800396c <HAL_I2C_MspInit+0x78>)
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800392c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003930:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003932:	2312      	movs	r3, #18
 8003934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003936:	2303      	movs	r3, #3
 8003938:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800393a:	f107 0310 	add.w	r3, r7, #16
 800393e:	4619      	mov	r1, r3
 8003940:	480b      	ldr	r0, [pc, #44]	; (8003970 <HAL_I2C_MspInit+0x7c>)
 8003942:	f7fc ffd7 	bl	80008f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003946:	4b09      	ldr	r3, [pc, #36]	; (800396c <HAL_I2C_MspInit+0x78>)
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	4a08      	ldr	r2, [pc, #32]	; (800396c <HAL_I2C_MspInit+0x78>)
 800394c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003950:	61d3      	str	r3, [r2, #28]
 8003952:	4b06      	ldr	r3, [pc, #24]	; (800396c <HAL_I2C_MspInit+0x78>)
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800395a:	60bb      	str	r3, [r7, #8]
 800395c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800395e:	bf00      	nop
 8003960:	3720      	adds	r7, #32
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40005800 	.word	0x40005800
 800396c:	40021000 	.word	0x40021000
 8003970:	40010c00 	.word	0x40010c00

08003974 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003984:	d113      	bne.n	80039ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003986:	4b0c      	ldr	r3, [pc, #48]	; (80039b8 <HAL_TIM_Base_MspInit+0x44>)
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	4a0b      	ldr	r2, [pc, #44]	; (80039b8 <HAL_TIM_Base_MspInit+0x44>)
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	61d3      	str	r3, [r2, #28]
 8003992:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <HAL_TIM_Base_MspInit+0x44>)
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800399e:	2200      	movs	r2, #0
 80039a0:	2100      	movs	r1, #0
 80039a2:	201c      	movs	r0, #28
 80039a4:	f7fc fd0b 	bl	80003be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80039a8:	201c      	movs	r0, #28
 80039aa:	f7fc fd24 	bl	80003f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80039ae:	bf00      	nop
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40021000 	.word	0x40021000

080039bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b088      	sub	sp, #32
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c4:	f107 0310 	add.w	r3, r7, #16
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	605a      	str	r2, [r3, #4]
 80039ce:	609a      	str	r2, [r3, #8]
 80039d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a33      	ldr	r2, [pc, #204]	; (8003aa4 <HAL_UART_MspInit+0xe8>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d15e      	bne.n	8003a9a <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80039dc:	4b32      	ldr	r3, [pc, #200]	; (8003aa8 <HAL_UART_MspInit+0xec>)
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	4a31      	ldr	r2, [pc, #196]	; (8003aa8 <HAL_UART_MspInit+0xec>)
 80039e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e6:	61d3      	str	r3, [r2, #28]
 80039e8:	4b2f      	ldr	r3, [pc, #188]	; (8003aa8 <HAL_UART_MspInit+0xec>)
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039f4:	4b2c      	ldr	r3, [pc, #176]	; (8003aa8 <HAL_UART_MspInit+0xec>)
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	4a2b      	ldr	r2, [pc, #172]	; (8003aa8 <HAL_UART_MspInit+0xec>)
 80039fa:	f043 0304 	orr.w	r3, r3, #4
 80039fe:	6193      	str	r3, [r2, #24]
 8003a00:	4b29      	ldr	r3, [pc, #164]	; (8003aa8 <HAL_UART_MspInit+0xec>)
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	60bb      	str	r3, [r7, #8]
 8003a0a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003a0c:	2304      	movs	r3, #4
 8003a0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a10:	2302      	movs	r3, #2
 8003a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a14:	2303      	movs	r3, #3
 8003a16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a18:	f107 0310 	add.w	r3, r7, #16
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4823      	ldr	r0, [pc, #140]	; (8003aac <HAL_UART_MspInit+0xf0>)
 8003a20:	f7fc ff68 	bl	80008f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a24:	2308      	movs	r3, #8
 8003a26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a30:	f107 0310 	add.w	r3, r7, #16
 8003a34:	4619      	mov	r1, r3
 8003a36:	481d      	ldr	r0, [pc, #116]	; (8003aac <HAL_UART_MspInit+0xf0>)
 8003a38:	f7fc ff5c 	bl	80008f4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8003a3c:	4b1c      	ldr	r3, [pc, #112]	; (8003ab0 <HAL_UART_MspInit+0xf4>)
 8003a3e:	4a1d      	ldr	r2, [pc, #116]	; (8003ab4 <HAL_UART_MspInit+0xf8>)
 8003a40:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a42:	4b1b      	ldr	r3, [pc, #108]	; (8003ab0 <HAL_UART_MspInit+0xf4>)
 8003a44:	2210      	movs	r2, #16
 8003a46:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a48:	4b19      	ldr	r3, [pc, #100]	; (8003ab0 <HAL_UART_MspInit+0xf4>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a4e:	4b18      	ldr	r3, [pc, #96]	; (8003ab0 <HAL_UART_MspInit+0xf4>)
 8003a50:	2280      	movs	r2, #128	; 0x80
 8003a52:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a54:	4b16      	ldr	r3, [pc, #88]	; (8003ab0 <HAL_UART_MspInit+0xf4>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a5a:	4b15      	ldr	r3, [pc, #84]	; (8003ab0 <HAL_UART_MspInit+0xf4>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003a60:	4b13      	ldr	r3, [pc, #76]	; (8003ab0 <HAL_UART_MspInit+0xf4>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003a66:	4b12      	ldr	r3, [pc, #72]	; (8003ab0 <HAL_UART_MspInit+0xf4>)
 8003a68:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003a6c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003a6e:	4810      	ldr	r0, [pc, #64]	; (8003ab0 <HAL_UART_MspInit+0xf4>)
 8003a70:	f7fc fcdc 	bl	800042c <HAL_DMA_Init>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8003a7a:	f7ff ff03 	bl	8003884 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a0b      	ldr	r2, [pc, #44]	; (8003ab0 <HAL_UART_MspInit+0xf4>)
 8003a82:	631a      	str	r2, [r3, #48]	; 0x30
 8003a84:	4a0a      	ldr	r2, [pc, #40]	; (8003ab0 <HAL_UART_MspInit+0xf4>)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	2026      	movs	r0, #38	; 0x26
 8003a90:	f7fc fc95 	bl	80003be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003a94:	2026      	movs	r0, #38	; 0x26
 8003a96:	f7fc fcae 	bl	80003f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a9a:	bf00      	nop
 8003a9c:	3720      	adds	r7, #32
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40004400 	.word	0x40004400
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	40010800 	.word	0x40010800
 8003ab0:	2000008c 	.word	0x2000008c
 8003ab4:	40020080 	.word	0x40020080

08003ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003abc:	bf00      	nop
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr

08003ac4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ac8:	e7fe      	b.n	8003ac8 <HardFault_Handler+0x4>

08003aca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003aca:	b480      	push	{r7}
 8003acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ace:	e7fe      	b.n	8003ace <MemManage_Handler+0x4>

08003ad0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ad4:	e7fe      	b.n	8003ad4 <BusFault_Handler+0x4>

08003ad6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ada:	e7fe      	b.n	8003ada <UsageFault_Handler+0x4>

08003adc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ae0:	bf00      	nop
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr

08003ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003aec:	bf00      	nop
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr

08003af4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003af8:	bf00      	nop
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bc80      	pop	{r7}
 8003afe:	4770      	bx	lr

08003b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b04:	f7fc fb68 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b08:	bf00      	nop
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003b10:	4802      	ldr	r0, [pc, #8]	; (8003b1c <DMA1_Channel7_IRQHandler+0x10>)
 8003b12:	f7fc fdbb 	bl	800068c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	2000008c 	.word	0x2000008c

08003b20 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003b24:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003b28:	f7fd f856 	bl	8000bd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003b2c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003b30:	f7fd f852 	bl	8000bd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003b34:	bf00      	nop
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003b3c:	4802      	ldr	r0, [pc, #8]	; (8003b48 <TIM2_IRQHandler+0x10>)
 8003b3e:	f7fe fc5b 	bl	80023f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003b42:	bf00      	nop
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	200000d4 	.word	0x200000d4

08003b4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003b50:	4802      	ldr	r0, [pc, #8]	; (8003b5c <USART2_IRQHandler+0x10>)
 8003b52:	f7ff f83d 	bl	8002bd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003b56:	bf00      	nop
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000114 	.word	0x20000114

08003b60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003b64:	4b15      	ldr	r3, [pc, #84]	; (8003bbc <SystemInit+0x5c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a14      	ldr	r2, [pc, #80]	; (8003bbc <SystemInit+0x5c>)
 8003b6a:	f043 0301 	orr.w	r3, r3, #1
 8003b6e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003b70:	4b12      	ldr	r3, [pc, #72]	; (8003bbc <SystemInit+0x5c>)
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	4911      	ldr	r1, [pc, #68]	; (8003bbc <SystemInit+0x5c>)
 8003b76:	4b12      	ldr	r3, [pc, #72]	; (8003bc0 <SystemInit+0x60>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003b7c:	4b0f      	ldr	r3, [pc, #60]	; (8003bbc <SystemInit+0x5c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a0e      	ldr	r2, [pc, #56]	; (8003bbc <SystemInit+0x5c>)
 8003b82:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b8a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <SystemInit+0x5c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a0a      	ldr	r2, [pc, #40]	; (8003bbc <SystemInit+0x5c>)
 8003b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b96:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003b98:	4b08      	ldr	r3, [pc, #32]	; (8003bbc <SystemInit+0x5c>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	4a07      	ldr	r2, [pc, #28]	; (8003bbc <SystemInit+0x5c>)
 8003b9e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003ba2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003ba4:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <SystemInit+0x5c>)
 8003ba6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003baa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003bac:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <SystemInit+0x64>)
 8003bae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003bb2:	609a      	str	r2, [r3, #8]
#endif 
}
 8003bb4:	bf00      	nop
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	f8ff0000 	.word	0xf8ff0000
 8003bc4:	e000ed00 	.word	0xe000ed00

08003bc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003bc8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003bca:	e003      	b.n	8003bd4 <LoopCopyDataInit>

08003bcc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003bcc:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003bce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003bd0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003bd2:	3104      	adds	r1, #4

08003bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003bd4:	480a      	ldr	r0, [pc, #40]	; (8003c00 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003bd6:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003bd8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003bda:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003bdc:	d3f6      	bcc.n	8003bcc <CopyDataInit>
  ldr r2, =_sbss
 8003bde:	4a0a      	ldr	r2, [pc, #40]	; (8003c08 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003be0:	e002      	b.n	8003be8 <LoopFillZerobss>

08003be2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003be2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003be4:	f842 3b04 	str.w	r3, [r2], #4

08003be8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003be8:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003bea:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003bec:	d3f9      	bcc.n	8003be2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003bee:	f7ff ffb7 	bl	8003b60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bf2:	f000 f80f 	bl	8003c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003bf6:	f7ff fb9b 	bl	8003330 <main>
  bx lr
 8003bfa:	4770      	bx	lr
  ldr r3, =_sidata
 8003bfc:	08003cb8 	.word	0x08003cb8
  ldr r0, =_sdata
 8003c00:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003c04:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8003c08:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8003c0c:	2000016c 	.word	0x2000016c

08003c10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c10:	e7fe      	b.n	8003c10 <ADC1_2_IRQHandler>
	...

08003c14 <__libc_init_array>:
 8003c14:	b570      	push	{r4, r5, r6, lr}
 8003c16:	2500      	movs	r5, #0
 8003c18:	4e0c      	ldr	r6, [pc, #48]	; (8003c4c <__libc_init_array+0x38>)
 8003c1a:	4c0d      	ldr	r4, [pc, #52]	; (8003c50 <__libc_init_array+0x3c>)
 8003c1c:	1ba4      	subs	r4, r4, r6
 8003c1e:	10a4      	asrs	r4, r4, #2
 8003c20:	42a5      	cmp	r5, r4
 8003c22:	d109      	bne.n	8003c38 <__libc_init_array+0x24>
 8003c24:	f000 f822 	bl	8003c6c <_init>
 8003c28:	2500      	movs	r5, #0
 8003c2a:	4e0a      	ldr	r6, [pc, #40]	; (8003c54 <__libc_init_array+0x40>)
 8003c2c:	4c0a      	ldr	r4, [pc, #40]	; (8003c58 <__libc_init_array+0x44>)
 8003c2e:	1ba4      	subs	r4, r4, r6
 8003c30:	10a4      	asrs	r4, r4, #2
 8003c32:	42a5      	cmp	r5, r4
 8003c34:	d105      	bne.n	8003c42 <__libc_init_array+0x2e>
 8003c36:	bd70      	pop	{r4, r5, r6, pc}
 8003c38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c3c:	4798      	blx	r3
 8003c3e:	3501      	adds	r5, #1
 8003c40:	e7ee      	b.n	8003c20 <__libc_init_array+0xc>
 8003c42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c46:	4798      	blx	r3
 8003c48:	3501      	adds	r5, #1
 8003c4a:	e7f2      	b.n	8003c32 <__libc_init_array+0x1e>
 8003c4c:	08003cb0 	.word	0x08003cb0
 8003c50:	08003cb0 	.word	0x08003cb0
 8003c54:	08003cb0 	.word	0x08003cb0
 8003c58:	08003cb4 	.word	0x08003cb4

08003c5c <memset>:
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	4402      	add	r2, r0
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d100      	bne.n	8003c66 <memset+0xa>
 8003c64:	4770      	bx	lr
 8003c66:	f803 1b01 	strb.w	r1, [r3], #1
 8003c6a:	e7f9      	b.n	8003c60 <memset+0x4>

08003c6c <_init>:
 8003c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6e:	bf00      	nop
 8003c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c72:	bc08      	pop	{r3}
 8003c74:	469e      	mov	lr, r3
 8003c76:	4770      	bx	lr

08003c78 <_fini>:
 8003c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7a:	bf00      	nop
 8003c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7e:	bc08      	pop	{r3}
 8003c80:	469e      	mov	lr, r3
 8003c82:	4770      	bx	lr
